
SGVal_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dbc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800696c  0800696c  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08006974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000118  08006a88  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08006a88  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d086  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248d  00000000  00000000  0002d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015291  00000000  00000000  00030e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4e5  00000000  00000000  000460f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b318  00000000  00000000  000545d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf8ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000cf940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000118 	.word	0x20000118
 8000158:	00000000 	.word	0x00000000
 800015c:	08005ee0 	.word	0x08005ee0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000011c 	.word	0x2000011c
 8000178:	08005ee0 	.word	0x08005ee0

0800017c <strcmp>:
 800017c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000184:	2a01      	cmp	r2, #1
 8000186:	bf28      	it	cs
 8000188:	429a      	cmpcs	r2, r3
 800018a:	d0f7      	beq.n	800017c <strcmp>
 800018c:	1ad0      	subs	r0, r2, r3
 800018e:	4770      	bx	lr

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <__aeabi_uldivmod>:
 80001a0:	b953      	cbnz	r3, 80001b8 <__aeabi_uldivmod+0x18>
 80001a2:	b94a      	cbnz	r2, 80001b8 <__aeabi_uldivmod+0x18>
 80001a4:	2900      	cmp	r1, #0
 80001a6:	bf08      	it	eq
 80001a8:	2800      	cmpeq	r0, #0
 80001aa:	bf1c      	itt	ne
 80001ac:	f04f 31ff 	movne.w	r1, #4294967295
 80001b0:	f04f 30ff 	movne.w	r0, #4294967295
 80001b4:	f000 b976 	b.w	80004a4 <__aeabi_idiv0>
 80001b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c0:	f000 f806 	bl	80001d0 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4770      	bx	lr

080001d0 <__udivmoddi4>:
 80001d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d4:	9e08      	ldr	r6, [sp, #32]
 80001d6:	460d      	mov	r5, r1
 80001d8:	4604      	mov	r4, r0
 80001da:	4688      	mov	r8, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14d      	bne.n	800027c <__udivmoddi4+0xac>
 80001e0:	428a      	cmp	r2, r1
 80001e2:	4694      	mov	ip, r2
 80001e4:	d968      	bls.n	80002b8 <__udivmoddi4+0xe8>
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	b152      	cbz	r2, 8000202 <__udivmoddi4+0x32>
 80001ec:	fa01 f302 	lsl.w	r3, r1, r2
 80001f0:	f1c2 0120 	rsb	r1, r2, #32
 80001f4:	fa20 f101 	lsr.w	r1, r0, r1
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	ea41 0803 	orr.w	r8, r1, r3
 8000200:	4094      	lsls	r4, r2
 8000202:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000206:	fbb8 f7f1 	udiv	r7, r8, r1
 800020a:	fa1f fe8c 	uxth.w	lr, ip
 800020e:	fb01 8817 	mls	r8, r1, r7, r8
 8000212:	fb07 f00e 	mul.w	r0, r7, lr
 8000216:	0c23      	lsrs	r3, r4, #16
 8000218:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800021c:	4298      	cmp	r0, r3
 800021e:	d90a      	bls.n	8000236 <__udivmoddi4+0x66>
 8000220:	eb1c 0303 	adds.w	r3, ip, r3
 8000224:	f107 35ff 	add.w	r5, r7, #4294967295
 8000228:	f080 811e 	bcs.w	8000468 <__udivmoddi4+0x298>
 800022c:	4298      	cmp	r0, r3
 800022e:	f240 811b 	bls.w	8000468 <__udivmoddi4+0x298>
 8000232:	3f02      	subs	r7, #2
 8000234:	4463      	add	r3, ip
 8000236:	1a1b      	subs	r3, r3, r0
 8000238:	fbb3 f0f1 	udiv	r0, r3, r1
 800023c:	fb01 3310 	mls	r3, r1, r0, r3
 8000240:	fb00 fe0e 	mul.w	lr, r0, lr
 8000244:	b2a4      	uxth	r4, r4
 8000246:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800024a:	45a6      	cmp	lr, r4
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x94>
 800024e:	eb1c 0404 	adds.w	r4, ip, r4
 8000252:	f100 33ff 	add.w	r3, r0, #4294967295
 8000256:	f080 8109 	bcs.w	800046c <__udivmoddi4+0x29c>
 800025a:	45a6      	cmp	lr, r4
 800025c:	f240 8106 	bls.w	800046c <__udivmoddi4+0x29c>
 8000260:	4464      	add	r4, ip
 8000262:	3802      	subs	r0, #2
 8000264:	2100      	movs	r1, #0
 8000266:	eba4 040e 	sub.w	r4, r4, lr
 800026a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800026e:	b11e      	cbz	r6, 8000278 <__udivmoddi4+0xa8>
 8000270:	2300      	movs	r3, #0
 8000272:	40d4      	lsrs	r4, r2
 8000274:	e9c6 4300 	strd	r4, r3, [r6]
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	428b      	cmp	r3, r1
 800027e:	d908      	bls.n	8000292 <__udivmoddi4+0xc2>
 8000280:	2e00      	cmp	r6, #0
 8000282:	f000 80ee 	beq.w	8000462 <__udivmoddi4+0x292>
 8000286:	2100      	movs	r1, #0
 8000288:	e9c6 0500 	strd	r0, r5, [r6]
 800028c:	4608      	mov	r0, r1
 800028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000292:	fab3 f183 	clz	r1, r3
 8000296:	2900      	cmp	r1, #0
 8000298:	d14a      	bne.n	8000330 <__udivmoddi4+0x160>
 800029a:	42ab      	cmp	r3, r5
 800029c:	d302      	bcc.n	80002a4 <__udivmoddi4+0xd4>
 800029e:	4282      	cmp	r2, r0
 80002a0:	f200 80fc 	bhi.w	800049c <__udivmoddi4+0x2cc>
 80002a4:	1a84      	subs	r4, r0, r2
 80002a6:	eb65 0303 	sbc.w	r3, r5, r3
 80002aa:	2001      	movs	r0, #1
 80002ac:	4698      	mov	r8, r3
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d0e2      	beq.n	8000278 <__udivmoddi4+0xa8>
 80002b2:	e9c6 4800 	strd	r4, r8, [r6]
 80002b6:	e7df      	b.n	8000278 <__udivmoddi4+0xa8>
 80002b8:	b902      	cbnz	r2, 80002bc <__udivmoddi4+0xec>
 80002ba:	deff      	udf	#255	; 0xff
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	f040 8091 	bne.w	80003e8 <__udivmoddi4+0x218>
 80002c6:	eba1 000c 	sub.w	r0, r1, ip
 80002ca:	2101      	movs	r1, #1
 80002cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d0:	fa1f fe8c 	uxth.w	lr, ip
 80002d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002d8:	fb07 0013 	mls	r0, r7, r3, r0
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002e2:	fb0e f003 	mul.w	r0, lr, r3
 80002e6:	42a8      	cmp	r0, r5
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x12c>
 80002ea:	eb1c 0505 	adds.w	r5, ip, r5
 80002ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x12a>
 80002f4:	42a8      	cmp	r0, r5
 80002f6:	f200 80ce 	bhi.w	8000496 <__udivmoddi4+0x2c6>
 80002fa:	4643      	mov	r3, r8
 80002fc:	1a2d      	subs	r5, r5, r0
 80002fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8000302:	fb07 5510 	mls	r5, r7, r0, r5
 8000306:	fb0e fe00 	mul.w	lr, lr, r0
 800030a:	b2a4      	uxth	r4, r4
 800030c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000310:	45a6      	cmp	lr, r4
 8000312:	d908      	bls.n	8000326 <__udivmoddi4+0x156>
 8000314:	eb1c 0404 	adds.w	r4, ip, r4
 8000318:	f100 35ff 	add.w	r5, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x154>
 800031e:	45a6      	cmp	lr, r4
 8000320:	f200 80b6 	bhi.w	8000490 <__udivmoddi4+0x2c0>
 8000324:	4628      	mov	r0, r5
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800032e:	e79e      	b.n	800026e <__udivmoddi4+0x9e>
 8000330:	f1c1 0720 	rsb	r7, r1, #32
 8000334:	408b      	lsls	r3, r1
 8000336:	fa22 fc07 	lsr.w	ip, r2, r7
 800033a:	ea4c 0c03 	orr.w	ip, ip, r3
 800033e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000342:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000346:	fbba f8f9 	udiv	r8, sl, r9
 800034a:	fa20 f307 	lsr.w	r3, r0, r7
 800034e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000352:	408d      	lsls	r5, r1
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	431d      	orrs	r5, r3
 800035a:	fa00 f301 	lsl.w	r3, r0, r1
 800035e:	fb08 f00e 	mul.w	r0, r8, lr
 8000362:	0c2c      	lsrs	r4, r5, #16
 8000364:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000368:	42a0      	cmp	r0, r4
 800036a:	fa02 f201 	lsl.w	r2, r2, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0x1b8>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f108 3aff 	add.w	sl, r8, #4294967295
 8000378:	f080 8088 	bcs.w	800048c <__udivmoddi4+0x2bc>
 800037c:	42a0      	cmp	r0, r4
 800037e:	f240 8085 	bls.w	800048c <__udivmoddi4+0x2bc>
 8000382:	f1a8 0802 	sub.w	r8, r8, #2
 8000386:	4464      	add	r4, ip
 8000388:	1a24      	subs	r4, r4, r0
 800038a:	fbb4 f0f9 	udiv	r0, r4, r9
 800038e:	fb09 4410 	mls	r4, r9, r0, r4
 8000392:	fb00 fe0e 	mul.w	lr, r0, lr
 8000396:	b2ad      	uxth	r5, r5
 8000398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x1e2>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a8:	d26c      	bcs.n	8000484 <__udivmoddi4+0x2b4>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	d96a      	bls.n	8000484 <__udivmoddi4+0x2b4>
 80003ae:	3802      	subs	r0, #2
 80003b0:	4464      	add	r4, ip
 80003b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b6:	fba0 9502 	umull	r9, r5, r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	42ac      	cmp	r4, r5
 80003c0:	46c8      	mov	r8, r9
 80003c2:	46ae      	mov	lr, r5
 80003c4:	d356      	bcc.n	8000474 <__udivmoddi4+0x2a4>
 80003c6:	d053      	beq.n	8000470 <__udivmoddi4+0x2a0>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d069      	beq.n	80004a0 <__udivmoddi4+0x2d0>
 80003cc:	ebb3 0208 	subs.w	r2, r3, r8
 80003d0:	eb64 040e 	sbc.w	r4, r4, lr
 80003d4:	fa22 f301 	lsr.w	r3, r2, r1
 80003d8:	fa04 f707 	lsl.w	r7, r4, r7
 80003dc:	431f      	orrs	r7, r3
 80003de:	40cc      	lsrs	r4, r1
 80003e0:	e9c6 7400 	strd	r7, r4, [r6]
 80003e4:	2100      	movs	r1, #0
 80003e6:	e747      	b.n	8000278 <__udivmoddi4+0xa8>
 80003e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ec:	f1c2 0120 	rsb	r1, r2, #32
 80003f0:	fa25 f301 	lsr.w	r3, r5, r1
 80003f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f8:	fa20 f101 	lsr.w	r1, r0, r1
 80003fc:	4095      	lsls	r5, r2
 80003fe:	430d      	orrs	r5, r1
 8000400:	fbb3 f1f7 	udiv	r1, r3, r7
 8000404:	fb07 3311 	mls	r3, r7, r1, r3
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	0c28      	lsrs	r0, r5, #16
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	fb01 f30e 	mul.w	r3, r1, lr
 8000416:	4283      	cmp	r3, r0
 8000418:	fa04 f402 	lsl.w	r4, r4, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x260>
 800041e:	eb1c 0000 	adds.w	r0, ip, r0
 8000422:	f101 38ff 	add.w	r8, r1, #4294967295
 8000426:	d22f      	bcs.n	8000488 <__udivmoddi4+0x2b8>
 8000428:	4283      	cmp	r3, r0
 800042a:	d92d      	bls.n	8000488 <__udivmoddi4+0x2b8>
 800042c:	3902      	subs	r1, #2
 800042e:	4460      	add	r0, ip
 8000430:	1ac0      	subs	r0, r0, r3
 8000432:	fbb0 f3f7 	udiv	r3, r0, r7
 8000436:	fb07 0013 	mls	r0, r7, r3, r0
 800043a:	b2ad      	uxth	r5, r5
 800043c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000440:	fb03 f00e 	mul.w	r0, r3, lr
 8000444:	42a8      	cmp	r0, r5
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x28a>
 8000448:	eb1c 0505 	adds.w	r5, ip, r5
 800044c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000450:	d216      	bcs.n	8000480 <__udivmoddi4+0x2b0>
 8000452:	42a8      	cmp	r0, r5
 8000454:	d914      	bls.n	8000480 <__udivmoddi4+0x2b0>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	1a28      	subs	r0, r5, r0
 800045c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000460:	e738      	b.n	80002d4 <__udivmoddi4+0x104>
 8000462:	4631      	mov	r1, r6
 8000464:	4630      	mov	r0, r6
 8000466:	e707      	b.n	8000278 <__udivmoddi4+0xa8>
 8000468:	462f      	mov	r7, r5
 800046a:	e6e4      	b.n	8000236 <__udivmoddi4+0x66>
 800046c:	4618      	mov	r0, r3
 800046e:	e6f9      	b.n	8000264 <__udivmoddi4+0x94>
 8000470:	454b      	cmp	r3, r9
 8000472:	d2a9      	bcs.n	80003c8 <__udivmoddi4+0x1f8>
 8000474:	ebb9 0802 	subs.w	r8, r9, r2
 8000478:	eb65 0e0c 	sbc.w	lr, r5, ip
 800047c:	3801      	subs	r0, #1
 800047e:	e7a3      	b.n	80003c8 <__udivmoddi4+0x1f8>
 8000480:	4643      	mov	r3, r8
 8000482:	e7ea      	b.n	800045a <__udivmoddi4+0x28a>
 8000484:	4628      	mov	r0, r5
 8000486:	e794      	b.n	80003b2 <__udivmoddi4+0x1e2>
 8000488:	4641      	mov	r1, r8
 800048a:	e7d1      	b.n	8000430 <__udivmoddi4+0x260>
 800048c:	46d0      	mov	r8, sl
 800048e:	e77b      	b.n	8000388 <__udivmoddi4+0x1b8>
 8000490:	4464      	add	r4, ip
 8000492:	3802      	subs	r0, #2
 8000494:	e747      	b.n	8000326 <__udivmoddi4+0x156>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	e72f      	b.n	80002fc <__udivmoddi4+0x12c>
 800049c:	4608      	mov	r0, r1
 800049e:	e706      	b.n	80002ae <__udivmoddi4+0xde>
 80004a0:	4631      	mov	r1, r6
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0xa8>

080004a4 <__aeabi_idiv0>:
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop

080004a8 <Flash_Erase>:
 *      Author: admin
 */
#include "flash.h"
#include "stm32l1xx.h"
//#include "stm32f1xx.h"
void Flash_Erase(uint32_t address){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80004b0:	f001 fd84 	bl	8001fbc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.NbPages =1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	613b      	str	r3, [r7, #16]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInitStruct, &pageerr);
 80004c0:	f107 0208 	add.w	r2, r7, #8
 80004c4:	f107 030c 	add.w	r3, r7, #12
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fe7c 	bl	80021c8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80004d0:	f001 fdae 	bl	8002030 <HAL_FLASH_Lock>
}
 80004d4:	bf00      	nop
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <Flash_Write_Array>:
	*(float*)data = f;
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *(uint32_t*)data);
	HAL_FLASH_Lock();
}

void Flash_Write_Array(uint32_t address, uint8_t *arr, uint16_t len){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	4613      	mov	r3, r2
 80004e8:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80004ea:	f001 fd67 	bl	8001fbc <HAL_FLASH_Unlock>
	uint32_t *pt = (uint32_t*)arr;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	617b      	str	r3, [r7, #20]
	for (uint16_t i= 0; i < (len+3)/4;i++) {
 80004f2:	2300      	movs	r3, #0
 80004f4:	827b      	strh	r3, [r7, #18]
 80004f6:	e010      	b.n	800051a <Flash_Write_Array+0x3e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+4*i, *pt);
 80004f8:	8a7b      	ldrh	r3, [r7, #18]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	461a      	mov	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	18d1      	adds	r1, r2, r3
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	2002      	movs	r0, #2
 800050a:	f001 fd27 	bl	8001f5c <HAL_FLASH_Program>
		pt++;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3304      	adds	r3, #4
 8000512:	617b      	str	r3, [r7, #20]
	for (uint16_t i= 0; i < (len+3)/4;i++) {
 8000514:	8a7b      	ldrh	r3, [r7, #18]
 8000516:	3301      	adds	r3, #1
 8000518:	827b      	strh	r3, [r7, #18]
 800051a:	8a7a      	ldrh	r2, [r7, #18]
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	3303      	adds	r3, #3
 8000520:	2b00      	cmp	r3, #0
 8000522:	da00      	bge.n	8000526 <Flash_Write_Array+0x4a>
 8000524:	3303      	adds	r3, #3
 8000526:	109b      	asrs	r3, r3, #2
 8000528:	429a      	cmp	r2, r3
 800052a:	dbe5      	blt.n	80004f8 <Flash_Write_Array+0x1c>
	}
	HAL_FLASH_Lock();
 800052c:	f001 fd80 	bl	8002030 <HAL_FLASH_Lock>
}
 8000530:	bf00      	nop
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <Flash_Read_Array>:
void Flash_Read_Float(uint32_t address){
	uint32_t data = *(__IO uint32_t *)(address);
	return *(float*)(&data);

}
void Flash_Read_Array(uint32_t address,uint8_t *arr, uint16_t len){
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	80fb      	strh	r3, [r7, #6]
	uint32_t *pt = (uint32_t*)arr;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	617b      	str	r3, [r7, #20]
	for (uint32_t i= 0; i < (len+4)/4;i++) {
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	e00c      	b.n	800056a <Flash_Read_Array+0x32>
		*pt = *(__IO uint32_t *)(address+4*i);
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	009a      	lsls	r2, r3, #2
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4413      	add	r3, r2
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	601a      	str	r2, [r3, #0]
		pt++;
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3304      	adds	r3, #4
 8000562:	617b      	str	r3, [r7, #20]
	for (uint32_t i= 0; i < (len+4)/4;i++) {
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	3301      	adds	r3, #1
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	3304      	adds	r3, #4
 800056e:	2b00      	cmp	r3, #0
 8000570:	da00      	bge.n	8000574 <Flash_Read_Array+0x3c>
 8000572:	3303      	adds	r3, #3
 8000574:	109b      	asrs	r3, r3, #2
 8000576:	461a      	mov	r2, r3
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	4293      	cmp	r3, r2
 800057c:	d3e8      	bcc.n	8000550 <Flash_Read_Array+0x18>
	}
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	371c      	adds	r7, #28
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a97      	ldr	r2, [pc, #604]	; (80007f8 <HAL_UART_RxCpltCallback+0x26c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	f040 8128 	bne.w	80007f0 <HAL_UART_RxCpltCallback+0x264>
		flag_config_1 = 1;
 80005a0:	4b96      	ldr	r3, [pc, #600]	; (80007fc <HAL_UART_RxCpltCallback+0x270>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
		uint8_t	 receivedChar;
		printf("+Start Config (Enter)\n");
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <HAL_UART_RxCpltCallback+0x274>)
 80005a8:	f004 fb3a 	bl	8004c20 <puts>
		size_t index = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
		do {
			HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 80005b0:	f107 010f 	add.w	r1, r7, #15
 80005b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005b8:	2201      	movs	r2, #1
 80005ba:	4892      	ldr	r0, [pc, #584]	; (8000804 <HAL_UART_RxCpltCallback+0x278>)
 80005bc:	f003 fbdb 	bl	8003d76 <HAL_UART_Receive>
			if (receivedChar == '\n') {
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b0a      	cmp	r3, #10
 80005c4:	d1f4      	bne.n	80005b0 <HAL_UART_RxCpltCallback+0x24>
				printf("+Pass Config:\n");
 80005c6:	4890      	ldr	r0, [pc, #576]	; (8000808 <HAL_UART_RxCpltCallback+0x27c>)
 80005c8:	f004 fb2a 	bl	8004c20 <puts>
				break;
 80005cc:	bf00      	nop
			}
		} while (1);
		memset(Rx_Config_1,'\0',sizeof(Rx_Config_1));
 80005ce:	2214      	movs	r2, #20
 80005d0:	2100      	movs	r1, #0
 80005d2:	488e      	ldr	r0, [pc, #568]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80005d4:	f004 fa96 	bl	8004b04 <memset>
		do {
			HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 80005d8:	f107 010f 	add.w	r1, r7, #15
 80005dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005e0:	2201      	movs	r2, #1
 80005e2:	4888      	ldr	r0, [pc, #544]	; (8000804 <HAL_UART_RxCpltCallback+0x278>)
 80005e4:	f003 fbc7 	bl	8003d76 <HAL_UART_Receive>
			if (receivedChar == '\n' || index >= bufferSize - 1) {
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	2b0a      	cmp	r3, #10
 80005ec:	d002      	beq.n	80005f4 <HAL_UART_RxCpltCallback+0x68>
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	2b12      	cmp	r3, #18
 80005f2:	d90d      	bls.n	8000610 <HAL_UART_RxCpltCallback+0x84>
				Rx_Config_1[index] = '\0'; // Kết thúc chuỗi
 80005f4:	4a85      	ldr	r2, [pc, #532]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
				break;
 80005fe:	bf00      	nop
			}
			Rx_Config_1[index] = receivedChar;
			index++;
		} while (1);
		size_t len = strlen(Rx_Config_1);
 8000600:	4882      	ldr	r0, [pc, #520]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 8000602:	f7ff fdc5 	bl	8000190 <strlen>
 8000606:	6178      	str	r0, [r7, #20]
		if (len > 0 && Rx_Config_1[len - 1] == '\r') {
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d015      	beq.n	800063a <HAL_UART_RxCpltCallback+0xae>
 800060e:	e009      	b.n	8000624 <HAL_UART_RxCpltCallback+0x98>
			Rx_Config_1[index] = receivedChar;
 8000610:	7bf9      	ldrb	r1, [r7, #15]
 8000612:	4a7e      	ldr	r2, [pc, #504]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	4413      	add	r3, r2
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
			index++;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	3301      	adds	r3, #1
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 8000622:	e7d9      	b.n	80005d8 <HAL_UART_RxCpltCallback+0x4c>
		if (len > 0 && Rx_Config_1[len - 1] == '\r') {
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a78      	ldr	r2, [pc, #480]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	2b0d      	cmp	r3, #13
 800062e:	d104      	bne.n	800063a <HAL_UART_RxCpltCallback+0xae>
			Rx_Config_1[len - 1] = '\0';
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a75      	ldr	r2, [pc, #468]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 8000636:	2100      	movs	r1, #0
 8000638:	54d1      	strb	r1, [r2, r3]
		}
		if (strcmp(Rx_Config_1,Pass_Config_1)==0) {
 800063a:	4975      	ldr	r1, [pc, #468]	; (8000810 <HAL_UART_RxCpltCallback+0x284>)
 800063c:	4873      	ldr	r0, [pc, #460]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 800063e:	f7ff fd9d 	bl	800017c <strcmp>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	f040 80cb 	bne.w	80007e0 <HAL_UART_RxCpltCallback+0x254>
				printf("STM32 PassConfig:Done\n");
 800064a:	4872      	ldr	r0, [pc, #456]	; (8000814 <HAL_UART_RxCpltCallback+0x288>)
 800064c:	f004 fae8 	bl	8004c20 <puts>

				while(retryCount<maxRetryCount){
 8000650:	e0bb      	b.n	80007ca <HAL_UART_RxCpltCallback+0x23e>
					printf("+Enter Password:\n");
 8000652:	4871      	ldr	r0, [pc, #452]	; (8000818 <HAL_UART_RxCpltCallback+0x28c>)
 8000654:	f004 fae4 	bl	8004c20 <puts>
					flag_config_1=1;
 8000658:	4b68      	ldr	r3, [pc, #416]	; (80007fc <HAL_UART_RxCpltCallback+0x270>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
					index = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
					memset(Rx_Config_1,'\0',sizeof(Rx_Config_1));
 8000662:	2214      	movs	r2, #20
 8000664:	2100      	movs	r1, #0
 8000666:	4869      	ldr	r0, [pc, #420]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 8000668:	f004 fa4c 	bl	8004b04 <memset>
					do {
						HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 800066c:	f107 010f 	add.w	r1, r7, #15
 8000670:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000674:	2201      	movs	r2, #1
 8000676:	4863      	ldr	r0, [pc, #396]	; (8000804 <HAL_UART_RxCpltCallback+0x278>)
 8000678:	f003 fb7d 	bl	8003d76 <HAL_UART_Receive>
						if (receivedChar == '\n' || index >= bufferSize - 1) {
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b0a      	cmp	r3, #10
 8000680:	d002      	beq.n	8000688 <HAL_UART_RxCpltCallback+0xfc>
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	2b12      	cmp	r3, #18
 8000686:	d90d      	bls.n	80006a4 <HAL_UART_RxCpltCallback+0x118>
							Rx_Config_1[index] = '\0'; // Kết thúc chuỗi
 8000688:	4a60      	ldr	r2, [pc, #384]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	4413      	add	r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
							break;
 8000692:	bf00      	nop
						}
						Rx_Config_1[index] = receivedChar;
						index++;
					} while (1);

					size_t len1 = strlen(Rx_Config_1);
 8000694:	485d      	ldr	r0, [pc, #372]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 8000696:	f7ff fd7b 	bl	8000190 <strlen>
 800069a:	6138      	str	r0, [r7, #16]
					if (len1 > 0 && Rx_Config_1[len1 - 1] == '\r') {
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d015      	beq.n	80006ce <HAL_UART_RxCpltCallback+0x142>
 80006a2:	e009      	b.n	80006b8 <HAL_UART_RxCpltCallback+0x12c>
						Rx_Config_1[index] = receivedChar;
 80006a4:	7bf9      	ldrb	r1, [r7, #15]
 80006a6:	4a59      	ldr	r2, [pc, #356]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	4413      	add	r3, r2
 80006ac:	460a      	mov	r2, r1
 80006ae:	701a      	strb	r2, [r3, #0]
						index++;
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	3301      	adds	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
						HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 80006b6:	e7d9      	b.n	800066c <HAL_UART_RxCpltCallback+0xe0>
					if (len1 > 0 && Rx_Config_1[len1 - 1] == '\r') {
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4a53      	ldr	r2, [pc, #332]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	2b0d      	cmp	r3, #13
 80006c2:	d104      	bne.n	80006ce <HAL_UART_RxCpltCallback+0x142>
						Rx_Config_1[len1 - 1] = '\0';
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a50      	ldr	r2, [pc, #320]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	54d1      	strb	r1, [r2, r3]
					}
					if (len1<4) {
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d803      	bhi.n	80006dc <HAL_UART_RxCpltCallback+0x150>
						flag_config_1 = 0;
 80006d4:	4b49      	ldr	r3, [pc, #292]	; (80007fc <HAL_UART_RxCpltCallback+0x270>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	e018      	b.n	800070e <HAL_UART_RxCpltCallback+0x182>
					}
					else {
						for (int i = 0; i < len1-1; ++i) {
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e010      	b.n	8000704 <HAL_UART_RxCpltCallback+0x178>
							if (Rx_Config_1[i]!=Pass_Word[i]) {
 80006e2:	4a4a      	ldr	r2, [pc, #296]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	4413      	add	r3, r2
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	494c      	ldr	r1, [pc, #304]	; (800081c <HAL_UART_RxCpltCallback+0x290>)
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	440b      	add	r3, r1
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d003      	beq.n	80006fe <HAL_UART_RxCpltCallback+0x172>
								flag_config_1 = 0;
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <HAL_UART_RxCpltCallback+0x270>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
								break;
 80006fc:	e007      	b.n	800070e <HAL_UART_RxCpltCallback+0x182>
						for (int i = 0; i < len1-1; ++i) {
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	3301      	adds	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	429a      	cmp	r2, r3
 800070c:	d8e9      	bhi.n	80006e2 <HAL_UART_RxCpltCallback+0x156>
							}
						}
					}

					if (flag_config_1 == 0) {
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <HAL_UART_RxCpltCallback+0x270>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d108      	bne.n	8000728 <HAL_UART_RxCpltCallback+0x19c>
						   printf("STM32 Password:Fail\n");
 8000716:	4842      	ldr	r0, [pc, #264]	; (8000820 <HAL_UART_RxCpltCallback+0x294>)
 8000718:	f004 fa82 	bl	8004c20 <puts>
						   retryCount++;
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <HAL_UART_RxCpltCallback+0x298>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a40      	ldr	r2, [pc, #256]	; (8000824 <HAL_UART_RxCpltCallback+0x298>)
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	e050      	b.n	80007ca <HAL_UART_RxCpltCallback+0x23e>
					   }
					else {
						   printf("STM32 Password:Done\n");
 8000728:	483f      	ldr	r0, [pc, #252]	; (8000828 <HAL_UART_RxCpltCallback+0x29c>)
 800072a:	f004 fa79 	bl	8004c20 <puts>
							//Xoa vung nho
						   for (int i = 0; i < 6; ++i) {
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	e009      	b.n	8000748 <HAL_UART_RxCpltCallback+0x1bc>
							Flash_Erase(configAddresses[i]);
 8000734:	4a3d      	ldr	r2, [pc, #244]	; (800082c <HAL_UART_RxCpltCallback+0x2a0>)
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff feb3 	bl	80004a8 <Flash_Erase>
						   for (int i = 0; i < 6; ++i) {
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3301      	adds	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	2b05      	cmp	r3, #5
 800074c:	ddf2      	ble.n	8000734 <HAL_UART_RxCpltCallback+0x1a8>
						   }
							for (int i = 0; i < 6; ++i) {
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	e013      	b.n	800077c <HAL_UART_RxCpltCallback+0x1f0>
								ConfigAndPrint(configNames[i], configAddresses[i]);
 8000754:	4a36      	ldr	r2, [pc, #216]	; (8000830 <HAL_UART_RxCpltCallback+0x2a4>)
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075c:	4933      	ldr	r1, [pc, #204]	; (800082c <HAL_UART_RxCpltCallback+0x2a0>)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000764:	4619      	mov	r1, r3
 8000766:	4610      	mov	r0, r2
 8000768:	f000 fbb0 	bl	8000ecc <ConfigAndPrint>
								sizeOfValueCf[i] = index;
 800076c:	4931      	ldr	r1, [pc, #196]	; (8000834 <HAL_UART_RxCpltCallback+0x2a8>)
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							for (int i = 0; i < 6; ++i) {
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	3301      	adds	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	2b05      	cmp	r3, #5
 8000780:	dde8      	ble.n	8000754 <HAL_UART_RxCpltCallback+0x1c8>
							}
							PrintConfig_All();
 8000782:	f000 fc67 	bl	8001054 <PrintConfig_All>
							flag_EraseChip=1;
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <HAL_UART_RxCpltCallback+0x2ac>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
							number_byte1=0;
 800078c:	492b      	ldr	r1, [pc, #172]	; (800083c <HAL_UART_RxCpltCallback+0x2b0>)
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
							number_byte2=0;
 800079a:	4929      	ldr	r1, [pc, #164]	; (8000840 <HAL_UART_RxCpltCallback+0x2b4>)
 800079c:	f04f 0200 	mov.w	r2, #0
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	e9c1 2300 	strd	r2, r3, [r1]
							number_byte3=0;
 80007a8:	4926      	ldr	r1, [pc, #152]	; (8000844 <HAL_UART_RxCpltCallback+0x2b8>)
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	e9c1 2300 	strd	r2, r3, [r1]
							number_page=0;
 80007b6:	4924      	ldr	r1, [pc, #144]	; (8000848 <HAL_UART_RxCpltCallback+0x2bc>)
 80007b8:	f04f 0200 	mov.w	r2, #0
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
							retryCount=10;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_UART_RxCpltCallback+0x298>)
 80007c6:	220a      	movs	r2, #10
 80007c8:	601a      	str	r2, [r3, #0]
				while(retryCount<maxRetryCount){
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_UART_RxCpltCallback+0x298>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_UART_RxCpltCallback+0x2c0>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	f6ff af3d 	blt.w	8000652 <HAL_UART_RxCpltCallback+0xc6>
					   }
					}
					retryCount=0;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_UART_RxCpltCallback+0x298>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e002      	b.n	80007e6 <HAL_UART_RxCpltCallback+0x25a>
				}
		        else {
					printf("STM32 PassConfig:Fail\n");
 80007e0:	481b      	ldr	r0, [pc, #108]	; (8000850 <HAL_UART_RxCpltCallback+0x2c4>)
 80007e2:	f004 fa1d 	bl	8004c20 <puts>
				}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)Rx_Config_1, bufferSize);
 80007e6:	2214      	movs	r2, #20
 80007e8:	4908      	ldr	r1, [pc, #32]	; (800080c <HAL_UART_RxCpltCallback+0x280>)
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <HAL_UART_RxCpltCallback+0x278>)
 80007ec:	f003 fb55 	bl	8003e9a <HAL_UART_Receive_IT>
    }

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	2000015c 	.word	0x2000015c
 8000800:	08005f3c 	.word	0x08005f3c
 8000804:	20000224 	.word	0x20000224
 8000808:	08005f54 	.word	0x08005f54
 800080c:	20000148 	.word	0x20000148
 8000810:	20000000 	.word	0x20000000
 8000814:	08005f64 	.word	0x08005f64
 8000818:	08005f7c 	.word	0x08005f7c
 800081c:	20000008 	.word	0x20000008
 8000820:	08005f90 	.word	0x08005f90
 8000824:	200001c8 	.word	0x200001c8
 8000828:	08005fa4 	.word	0x08005fa4
 800082c:	2000005c 	.word	0x2000005c
 8000830:	20000044 	.word	0x20000044
 8000834:	20000160 	.word	0x20000160
 8000838:	200001a0 	.word	0x200001a0
 800083c:	20000180 	.word	0x20000180
 8000840:	20000188 	.word	0x20000188
 8000844:	20000190 	.word	0x20000190
 8000848:	20000198 	.word	0x20000198
 800084c:	200000a0 	.word	0x200000a0
 8000850:	08005fb8 	.word	0x08005fb8

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000858:	b08a      	sub	sp, #40	; 0x28
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f001 f961 	bl	8001b22 <HAL_Init>

  /* USER CODE BEGIN Init */
  W25qxx_Init();
 8000860:	f000 fef4 	bl	800164c <W25qxx_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 fa4c 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f000 faf0 	bl	8000e4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800086c:	f000 fac4 	bl	8000df8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000870:	f000 fa8c 	bl	8000d8c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 6; ++i) {
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
 8000878:	e009      	b.n	800088e <main+0x3a>
	Flash_Erase(configAddresses[i]);
 800087a:	4a65      	ldr	r2, [pc, #404]	; (8000a10 <main+0x1bc>)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe10 	bl	80004a8 <Flash_Erase>
  for (int i = 0; i < 6; ++i) {
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	3301      	adds	r3, #1
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	2b05      	cmp	r3, #5
 8000892:	ddf2      	ble.n	800087a <main+0x26>
  }
// in vao flash
  Flash_Write_Array(ADDRESS_DATA_HOST, (uint8_t*)Host, sizeof(Host));
 8000894:	220f      	movs	r2, #15
 8000896:	495f      	ldr	r1, [pc, #380]	; (8000a14 <main+0x1c0>)
 8000898:	485f      	ldr	r0, [pc, #380]	; (8000a18 <main+0x1c4>)
 800089a:	f7ff fe1f 	bl	80004dc <Flash_Write_Array>
  Flash_Write_Array(ADDRESS_DATA_PORT, (uint8_t*)Port, sizeof(Port));
 800089e:	2205      	movs	r2, #5
 80008a0:	495e      	ldr	r1, [pc, #376]	; (8000a1c <main+0x1c8>)
 80008a2:	485f      	ldr	r0, [pc, #380]	; (8000a20 <main+0x1cc>)
 80008a4:	f7ff fe1a 	bl	80004dc <Flash_Write_Array>
  Flash_Write_Array(ADDRESS_DATA_MQTT_PORT, (uint8_t*)MQTT_port, sizeof(MQTT_port));
 80008a8:	2205      	movs	r2, #5
 80008aa:	495e      	ldr	r1, [pc, #376]	; (8000a24 <main+0x1d0>)
 80008ac:	485e      	ldr	r0, [pc, #376]	; (8000a28 <main+0x1d4>)
 80008ae:	f7ff fe15 	bl	80004dc <Flash_Write_Array>
  Flash_Write_Array(ADDRESS_DATA_USERNAME, (uint8_t*)Username, sizeof(Username));
 80008b2:	220a      	movs	r2, #10
 80008b4:	495d      	ldr	r1, [pc, #372]	; (8000a2c <main+0x1d8>)
 80008b6:	485e      	ldr	r0, [pc, #376]	; (8000a30 <main+0x1dc>)
 80008b8:	f7ff fe10 	bl	80004dc <Flash_Write_Array>
  Flash_Write_Array(ADDRESS_DATA_PASSWORD, (uint8_t*)Password, sizeof(Password));
 80008bc:	2205      	movs	r2, #5
 80008be:	495d      	ldr	r1, [pc, #372]	; (8000a34 <main+0x1e0>)
 80008c0:	485d      	ldr	r0, [pc, #372]	; (8000a38 <main+0x1e4>)
 80008c2:	f7ff fe0b 	bl	80004dc <Flash_Write_Array>
  Flash_Write_Array(ADDRESS_DATA_DEVICE_PROFILE, (uint8_t*)Device_Profile, sizeof(Device_Profile));
 80008c6:	2204      	movs	r2, #4
 80008c8:	495c      	ldr	r1, [pc, #368]	; (8000a3c <main+0x1e8>)
 80008ca:	485d      	ldr	r0, [pc, #372]	; (8000a40 <main+0x1ec>)
 80008cc:	f7ff fe06 	bl	80004dc <Flash_Write_Array>
  //in ra man hinh
  PrintConfig_All();
 80008d0:	f000 fbc0 	bl	8001054 <PrintConfig_All>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)Rx_Config_1, bufferSize);
 80008d4:	2214      	movs	r2, #20
 80008d6:	495b      	ldr	r1, [pc, #364]	; (8000a44 <main+0x1f0>)
 80008d8:	485b      	ldr	r0, [pc, #364]	; (8000a48 <main+0x1f4>)
 80008da:	f003 fade 	bl	8003e9a <HAL_UART_Receive_IT>
  flag_EraseChip=1;
 80008de:	4b5b      	ldr	r3, [pc, #364]	; (8000a4c <main+0x1f8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (memcmp(Device_Profile_1, Profile, 3) == 0) {
 80008e4:	2203      	movs	r2, #3
 80008e6:	495a      	ldr	r1, [pc, #360]	; (8000a50 <main+0x1fc>)
 80008e8:	485a      	ldr	r0, [pc, #360]	; (8000a54 <main+0x200>)
 80008ea:	f004 f8fb 	bl	8004ae4 <memcmp>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d174      	bne.n	80009de <main+0x18a>
		  if (flag_EraseChip==1) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <main+0x1f8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <main+0xb4>
			  flag_EraseChip=0;
 80008fc:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <main+0x1f8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
			  printf("Xoa chip\n");
 8000902:	4855      	ldr	r0, [pc, #340]	; (8000a58 <main+0x204>)
 8000904:	f004 f98c 	bl	8004c20 <puts>
//			  W25qxx_EraseChip();
		}
	 		  Write1[0]=PI_1;
 8000908:	4b54      	ldr	r3, [pc, #336]	; (8000a5c <main+0x208>)
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <main+0x20c>)
 8000910:	7013      	strb	r3, [r2, #0]
	 		  Write1[1]=(PI_1>>8)&0xFF;
 8000912:	4b52      	ldr	r3, [pc, #328]	; (8000a5c <main+0x208>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a50      	ldr	r2, [pc, #320]	; (8000a60 <main+0x20c>)
 800091e:	7053      	strb	r3, [r2, #1]
	 		  Write1[2]=PI_2;
 8000920:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <main+0x210>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <main+0x20c>)
 8000928:	7093      	strb	r3, [r2, #2]
	 		  Write1[3]=(PI_2>>8)&0xFF;
 800092a:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <main+0x210>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <main+0x20c>)
 8000936:	70d3      	strb	r3, [r2, #3]
	 		  for (int i = 0; i < 9; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	e00a      	b.n	8000954 <main+0x100>
	 			Write1[i + 4] = DI_1_485[i];
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	1d19      	adds	r1, r3, #4
 8000942:	4a49      	ldr	r2, [pc, #292]	; (8000a68 <main+0x214>)
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	4413      	add	r3, r2
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4a45      	ldr	r2, [pc, #276]	; (8000a60 <main+0x20c>)
 800094c:	5453      	strb	r3, [r2, r1]
	 		  for (int i = 0; i < 9; i++) {
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	3301      	adds	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2b08      	cmp	r3, #8
 8000958:	ddf1      	ble.n	800093e <main+0xea>
	 		  }
	 		  Write1[13]=AI_2_420;
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <main+0x218>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4a3f      	ldr	r2, [pc, #252]	; (8000a60 <main+0x20c>)
 8000962:	7353      	strb	r3, [r2, #13]
	 		  Write1[14]=(AI_2_420>>8)&0xFF;
 8000964:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <main+0x218>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4a3c      	ldr	r2, [pc, #240]	; (8000a60 <main+0x20c>)
 8000970:	7393      	strb	r3, [r2, #14]
	 		  Write1[15]=Battery;
 8000972:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <main+0x21c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <main+0x20c>)
 8000978:	73d3      	strb	r3, [r2, #15]
			  W25qxx_WritePage(Write1, 0x00000000+number_page, 0x00000000+number_byte1, sizeof(Write1));
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <main+0x220>)
 800097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000980:	4611      	mov	r1, r2
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <main+0x224>)
 8000984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000988:	2310      	movs	r3, #16
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <main+0x20c>)
 800098c:	f000 fff6 	bl	800197c <W25qxx_WritePage>
			  number_byte1+=16;
 8000990:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <main+0x224>)
 8000992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000996:	f112 0410 	adds.w	r4, r2, #16
 800099a:	f143 0500 	adc.w	r5, r3, #0
 800099e:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <main+0x224>)
 80009a0:	e9c3 4500 	strd	r4, r5, [r3]
			  if (number_byte1 >=256 ) {
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <main+0x224>)
 80009a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80009ae:	f173 0300 	sbcs.w	r3, r3, #0
 80009b2:	d310      	bcc.n	80009d6 <main+0x182>
				number_page++;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <main+0x220>)
 80009b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ba:	f112 0801 	adds.w	r8, r2, #1
 80009be:	f143 0900 	adc.w	r9, r3, #0
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <main+0x220>)
 80009c4:	e9c3 8900 	strd	r8, r9, [r3]
				number_byte1=0;
 80009c8:	492b      	ldr	r1, [pc, #172]	; (8000a78 <main+0x224>)
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	f04f 0300 	mov.w	r3, #0
 80009d2:	e9c1 2300 	strd	r2, r3, [r1]
				  }
	 			  printf("Hello Device_Profile_1\n");
 80009d6:	4829      	ldr	r0, [pc, #164]	; (8000a7c <main+0x228>)
 80009d8:	f004 f922 	bl	8004c20 <puts>
 80009dc:	e162      	b.n	8000ca4 <main+0x450>
	 	  }
	 	  else if (memcmp(Device_Profile_2, Profile, 3) == 0) {
 80009de:	2203      	movs	r2, #3
 80009e0:	491b      	ldr	r1, [pc, #108]	; (8000a50 <main+0x1fc>)
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <main+0x22c>)
 80009e4:	f004 f87e 	bl	8004ae4 <memcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 80c3 	bne.w	8000b76 <main+0x322>
	 		  if (flag_EraseChip==1) {
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <main+0x1f8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d107      	bne.n	8000a08 <main+0x1b4>
	 			  flag_EraseChip=0;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <main+0x1f8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
	 			  printf("Xoa chip\n");
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <main+0x204>)
 8000a00:	f004 f90e 	bl	8004c20 <puts>
	 			  W25qxx_EraseChip();
 8000a04:	f000 ff74 	bl	80018f0 <W25qxx_EraseChip>
	 		}

	 		  for (int i = 0; i < 9; i++) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	e046      	b.n	8000a9c <main+0x248>
 8000a0e:	bf00      	nop
 8000a10:	2000005c 	.word	0x2000005c
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	08004000 	.word	0x08004000
 8000a1c:	2000001c 	.word	0x2000001c
 8000a20:	08008000 	.word	0x08008000
 8000a24:	20000024 	.word	0x20000024
 8000a28:	0800c000 	.word	0x0800c000
 8000a2c:	2000002c 	.word	0x2000002c
 8000a30:	08010000 	.word	0x08010000
 8000a34:	20000038 	.word	0x20000038
 8000a38:	08014000 	.word	0x08014000
 8000a3c:	20000040 	.word	0x20000040
 8000a40:	08018000 	.word	0x08018000
 8000a44:	20000148 	.word	0x20000148
 8000a48:	20000224 	.word	0x20000224
 8000a4c:	200001a0 	.word	0x200001a0
 8000a50:	20000178 	.word	0x20000178
 8000a54:	20000074 	.word	0x20000074
 8000a58:	08005fd0 	.word	0x08005fd0
 8000a5c:	20000080 	.word	0x20000080
 8000a60:	200001a4 	.word	0x200001a4
 8000a64:	20000082 	.word	0x20000082
 8000a68:	20000084 	.word	0x20000084
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	2000009c 	.word	0x2000009c
 8000a74:	20000198 	.word	0x20000198
 8000a78:	20000180 	.word	0x20000180
 8000a7c:	08005fdc 	.word	0x08005fdc
 8000a80:	20000078 	.word	0x20000078
	 			Write2[i] = DI_1_485[i];
 8000a84:	4a8a      	ldr	r2, [pc, #552]	; (8000cb0 <main+0x45c>)
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	4413      	add	r3, r2
 8000a8a:	7819      	ldrb	r1, [r3, #0]
 8000a8c:	4a89      	ldr	r2, [pc, #548]	; (8000cb4 <main+0x460>)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	441a      	add	r2, r3
 8000a92:	460b      	mov	r3, r1
 8000a94:	7013      	strb	r3, [r2, #0]
	 		  for (int i = 0; i < 9; i++) {
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	2b08      	cmp	r3, #8
 8000aa0:	ddf0      	ble.n	8000a84 <main+0x230>
	 		  }
	 		Write2[9]=AI_1_485;
 8000aa2:	4b85      	ldr	r3, [pc, #532]	; (8000cb8 <main+0x464>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4a82      	ldr	r2, [pc, #520]	; (8000cb4 <main+0x460>)
 8000aaa:	7253      	strb	r3, [r2, #9]
	 		Write2[10]=(AI_1_485>>8)&0xFF;
 8000aac:	4b82      	ldr	r3, [pc, #520]	; (8000cb8 <main+0x464>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4a7f      	ldr	r2, [pc, #508]	; (8000cb4 <main+0x460>)
 8000ab8:	7293      	strb	r3, [r2, #10]
	 		Write2[11]=AI_2_485;
 8000aba:	4b80      	ldr	r3, [pc, #512]	; (8000cbc <main+0x468>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4a7c      	ldr	r2, [pc, #496]	; (8000cb4 <main+0x460>)
 8000ac2:	72d3      	strb	r3, [r2, #11]
	 		Write2[12]=(AI_2_485>>8)&0xFF;
 8000ac4:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <main+0x468>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4a79      	ldr	r2, [pc, #484]	; (8000cb4 <main+0x460>)
 8000ad0:	7313      	strb	r3, [r2, #12]
	 		Write2[13]=AI_3_485;
 8000ad2:	4b7b      	ldr	r3, [pc, #492]	; (8000cc0 <main+0x46c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4a76      	ldr	r2, [pc, #472]	; (8000cb4 <main+0x460>)
 8000ada:	7353      	strb	r3, [r2, #13]
	 		Write2[14]=(AI_3_485>>8)&0xFF;
 8000adc:	4b78      	ldr	r3, [pc, #480]	; (8000cc0 <main+0x46c>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4a73      	ldr	r2, [pc, #460]	; (8000cb4 <main+0x460>)
 8000ae8:	7393      	strb	r3, [r2, #14]
	 		Write2[15]=AI_4_485;
 8000aea:	4b76      	ldr	r3, [pc, #472]	; (8000cc4 <main+0x470>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	4a70      	ldr	r2, [pc, #448]	; (8000cb4 <main+0x460>)
 8000af2:	73d3      	strb	r3, [r2, #15]
	 		Write2[16]=(AI_4_485>>8)&0xFF;
 8000af4:	4b73      	ldr	r3, [pc, #460]	; (8000cc4 <main+0x470>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4a6d      	ldr	r2, [pc, #436]	; (8000cb4 <main+0x460>)
 8000b00:	7413      	strb	r3, [r2, #16]
	 		Write2[17]=Battery;
 8000b02:	4b71      	ldr	r3, [pc, #452]	; (8000cc8 <main+0x474>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4a6b      	ldr	r2, [pc, #428]	; (8000cb4 <main+0x460>)
 8000b08:	7453      	strb	r3, [r2, #17]
			  W25qxx_WritePage(Write2, 0x00000000+number_page, 0x00000000+number_byte2, sizeof(Write2));
 8000b0a:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <main+0x478>)
 8000b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <main+0x47c>)
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	2312      	movs	r3, #18
 8000b1a:	4866      	ldr	r0, [pc, #408]	; (8000cb4 <main+0x460>)
 8000b1c:	f000 ff2e 	bl	800197c <W25qxx_WritePage>
			  number_byte2+=18;
 8000b20:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <main+0x47c>)
 8000b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b26:	f112 0a12 	adds.w	sl, r2, #18
 8000b2a:	f143 0b00 	adc.w	fp, r3, #0
 8000b2e:	4b68      	ldr	r3, [pc, #416]	; (8000cd0 <main+0x47c>)
 8000b30:	e9c3 ab00 	strd	sl, fp, [r3]
			  if (number_byte2 >256 ) {
 8000b34:	4b66      	ldr	r3, [pc, #408]	; (8000cd0 <main+0x47c>)
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3a:	f240 1101 	movw	r1, #257	; 0x101
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	f173 0300 	sbcs.w	r3, r3, #0
 8000b44:	d313      	bcc.n	8000b6e <main+0x31a>
				number_page++;
 8000b46:	4b61      	ldr	r3, [pc, #388]	; (8000ccc <main+0x478>)
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	1c51      	adds	r1, r2, #1
 8000b4e:	6139      	str	r1, [r7, #16]
 8000b50:	f143 0300 	adc.w	r3, r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	4b5d      	ldr	r3, [pc, #372]	; (8000ccc <main+0x478>)
 8000b58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000b5c:	e9c3 1200 	strd	r1, r2, [r3]
				number_byte2=0;
 8000b60:	495b      	ldr	r1, [pc, #364]	; (8000cd0 <main+0x47c>)
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	e9c1 2300 	strd	r2, r3, [r1]
			  }

	 		  printf("Hello Device_Profile_2\n");
 8000b6e:	4859      	ldr	r0, [pc, #356]	; (8000cd4 <main+0x480>)
 8000b70:	f004 f856 	bl	8004c20 <puts>
 8000b74:	e096      	b.n	8000ca4 <main+0x450>
	 	  }
	 	  else if (memcmp(Device_Profile_3, Profile, 3) == 0) {
 8000b76:	2203      	movs	r2, #3
 8000b78:	4957      	ldr	r1, [pc, #348]	; (8000cd8 <main+0x484>)
 8000b7a:	4858      	ldr	r0, [pc, #352]	; (8000cdc <main+0x488>)
 8000b7c:	f003 ffb2 	bl	8004ae4 <memcmp>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 808b 	bne.w	8000c9e <main+0x44a>
	 		  if (flag_EraseChip==1) {
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <main+0x48c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d107      	bne.n	8000ba0 <main+0x34c>
	 			  flag_EraseChip=0;
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <main+0x48c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
	 			  printf("Xoa chip\n");
 8000b96:	4853      	ldr	r0, [pc, #332]	; (8000ce4 <main+0x490>)
 8000b98:	f004 f842 	bl	8004c20 <puts>
	 			  W25qxx_EraseChip();
 8000b9c:	f000 fea8 	bl	80018f0 <W25qxx_EraseChip>
	 		}

	 		  Write2[0]=PI_1;
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <main+0x494>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <main+0x460>)
 8000ba8:	7013      	strb	r3, [r2, #0]
	 		  Write2[1]=(PI_1>>8)&0xFF;
 8000baa:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <main+0x494>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <main+0x460>)
 8000bb6:	7053      	strb	r3, [r2, #1]
	 		  for (int i = 0; i < 9; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	e00a      	b.n	8000bd4 <main+0x380>
	 			Write2[i+2] = DI_1_485[i];
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	1c99      	adds	r1, r3, #2
 8000bc2:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <main+0x45c>)
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <main+0x460>)
 8000bcc:	5453      	strb	r3, [r2, r1]
	 		  for (int i = 0; i < 9; i++) {
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	ddf1      	ble.n	8000bbe <main+0x36a>
	 		  }
	 			Write2[11]=AI_1_420;
 8000bda:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0x498>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <main+0x460>)
 8000be2:	72d3      	strb	r3, [r2, #11]
	 			Write2[12]=(AI_1_420>>8)&0xFF;
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <main+0x498>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <main+0x460>)
 8000bf0:	7313      	strb	r3, [r2, #12]
	 			Write2[13]=AI_2_420;
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <main+0x49c>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <main+0x460>)
 8000bfa:	7353      	strb	r3, [r2, #13]
	 			Write2[14]=(AI_2_420>>8)&0xFF;
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <main+0x49c>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <main+0x460>)
 8000c08:	7393      	strb	r3, [r2, #14]
	 			Write2[15]=AI_3_420;
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <main+0x4a0>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <main+0x460>)
 8000c12:	73d3      	strb	r3, [r2, #15]
	 			Write2[16]=(AI_3_420>>8)&0xFF;
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <main+0x4a0>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <main+0x460>)
 8000c20:	7413      	strb	r3, [r2, #16]
	 			Write2[17]=Battery;
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <main+0x474>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <main+0x460>)
 8000c28:	7453      	strb	r3, [r2, #17]
			  W25qxx_WritePage(Write2, 0x00000000+number_page, 0x00000000+number_byte2, sizeof(Write2));
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <main+0x478>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <main+0x47c>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	2312      	movs	r3, #18
 8000c3a:	481e      	ldr	r0, [pc, #120]	; (8000cb4 <main+0x460>)
 8000c3c:	f000 fe9e 	bl	800197c <W25qxx_WritePage>
			  number_byte2+=18;
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <main+0x47c>)
 8000c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c46:	f112 0112 	adds.w	r1, r2, #18
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	f143 0300 	adc.w	r3, r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <main+0x47c>)
 8000c54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000c58:	e9c3 1200 	strd	r1, r2, [r3]
			  if (number_byte2 >256 ) {
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <main+0x47c>)
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c62:	f240 1101 	movw	r1, #257	; 0x101
 8000c66:	428a      	cmp	r2, r1
 8000c68:	f173 0300 	sbcs.w	r3, r3, #0
 8000c6c:	d313      	bcc.n	8000c96 <main+0x442>
				number_page++;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <main+0x478>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	1c51      	adds	r1, r2, #1
 8000c76:	6039      	str	r1, [r7, #0]
 8000c78:	f143 0300 	adc.w	r3, r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <main+0x478>)
 8000c80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000c84:	e9c3 1200 	strd	r1, r2, [r3]
				number_byte2=0;
 8000c88:	4911      	ldr	r1, [pc, #68]	; (8000cd0 <main+0x47c>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c1 2300 	strd	r2, r3, [r1]
			  }

	 		  printf("Hello Device_Profile_3\n");
 8000c96:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <main+0x4a4>)
 8000c98:	f003 ffc2 	bl	8004c20 <puts>
 8000c9c:	e002      	b.n	8000ca4 <main+0x450>
	 		}
	 	  else {
			printf("Device_Profile Fail\n");
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <main+0x4a8>)
 8000ca0:	f003 ffbe 	bl	8004c20 <puts>
		}
	  HAL_Delay(1000);
 8000ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca8:	f000 ffaa 	bl	8001c00 <HAL_Delay>
	  if (memcmp(Device_Profile_1, Profile, 3) == 0) {
 8000cac:	e61a      	b.n	80008e4 <main+0x90>
 8000cae:	bf00      	nop
 8000cb0:	20000084 	.word	0x20000084
 8000cb4:	200001b4 	.word	0x200001b4
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	20000096 	.word	0x20000096
 8000cc0:	20000098 	.word	0x20000098
 8000cc4:	2000009a 	.word	0x2000009a
 8000cc8:	2000009c 	.word	0x2000009c
 8000ccc:	20000198 	.word	0x20000198
 8000cd0:	20000188 	.word	0x20000188
 8000cd4:	08005ff4 	.word	0x08005ff4
 8000cd8:	20000178 	.word	0x20000178
 8000cdc:	2000007c 	.word	0x2000007c
 8000ce0:	200001a0 	.word	0x200001a0
 8000ce4:	08005fd0 	.word	0x08005fd0
 8000ce8:	20000080 	.word	0x20000080
 8000cec:	2000008e 	.word	0x2000008e
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	20000092 	.word	0x20000092
 8000cf8:	0800600c 	.word	0x0800600c
 8000cfc:	08006024 	.word	0x08006024

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b092      	sub	sp, #72	; 0x48
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2234      	movs	r2, #52	; 0x34
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fef8 	bl	8004b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <SystemClock_Config+0x88>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <SystemClock_Config+0x88>)
 8000d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d30:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fc50 	bl	80025ec <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000d52:	f000 f9d7 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 ff6c 	bl	8002c4c <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d7a:	f000 f9c3 	bl	8001104 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3748      	adds	r7, #72	; 0x48
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <MX_SPI2_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI2_Init+0x64>)
 8000dde:	f002 f9b9 	bl	8003154 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000de8:	f000 f98c 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200001cc 	.word	0x200001cc
 8000df4:	40003800 	.word	0x40003800

08000df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART1_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e30:	f002 fece 	bl	8003bd0 <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f963 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000224 	.word	0x20000224
 8000e48:	40013800 	.word	0x40013800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_GPIO_Init+0x78>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <MX_GPIO_Init+0x7c>)
 8000e9a:	f001 fb8f 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_GPIO_Init+0x7c>)
 8000eb8:	f001 fa00 	bl	80022bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020400 	.word	0x40020400

08000ecc <ConfigAndPrint>:

/* USER CODE BEGIN 4 */

void ConfigAndPrint(const char *configName, uint32_t flashAddress) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b092      	sub	sp, #72	; 0x48
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]

    uint8_t str2[50]="";
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	222e      	movs	r2, #46	; 0x2e
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fe0e 	bl	8004b04 <memset>
    sprintf(str2,"+Enter %s:\n", configName);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4939      	ldr	r1, [pc, #228]	; (8000fd4 <ConfigAndPrint+0x108>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fe9d 	bl	8004c30 <siprintf>
    HAL_UART_Transmit(&huart1, str2, sizeof(str2), 500);
 8000ef6:	f107 0110 	add.w	r1, r7, #16
 8000efa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efe:	2232      	movs	r2, #50	; 0x32
 8000f00:	4835      	ldr	r0, [pc, #212]	; (8000fd8 <ConfigAndPrint+0x10c>)
 8000f02:	f002 feb5 	bl	8003c70 <HAL_UART_Transmit>
    memset(str2, 0, sizeof(str2));
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2232      	movs	r2, #50	; 0x32
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fdf8 	bl	8004b04 <memset>
    uint8_t receivedChar;
    size_t index = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44

    do {
        HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 8000f18:	f107 010f 	add.w	r1, r7, #15
 8000f1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f20:	2201      	movs	r2, #1
 8000f22:	482d      	ldr	r0, [pc, #180]	; (8000fd8 <ConfigAndPrint+0x10c>)
 8000f24:	f002 ff27 	bl	8003d76 <HAL_UART_Receive>
        if (receivedChar == '\n' || index >= bufferSize - 1) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d002      	beq.n	8000f34 <ConfigAndPrint+0x68>
 8000f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d905      	bls.n	8000f40 <ConfigAndPrint+0x74>
            Rx_Config_1[index] = '\0'; // Kết thúc chuỗi
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <ConfigAndPrint+0x110>)
 8000f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
            break;
 8000f3e:	e009      	b.n	8000f54 <ConfigAndPrint+0x88>
        }
        Rx_Config_1[index] = receivedChar;
 8000f40:	7bf9      	ldrb	r1, [r7, #15]
 8000f42:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <ConfigAndPrint+0x110>)
 8000f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f46:	4413      	add	r3, r2
 8000f48:	460a      	mov	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
        index++;
 8000f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4e:	3301      	adds	r3, #1
 8000f50:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_UART_Receive(&huart1, &receivedChar, 1, 2000);
 8000f52:	e7e1      	b.n	8000f18 <ConfigAndPrint+0x4c>
    } while (1);
    sprintf(str2,">%s\n", Rx_Config_1);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <ConfigAndPrint+0x110>)
 8000f5a:	4921      	ldr	r1, [pc, #132]	; (8000fe0 <ConfigAndPrint+0x114>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fe67 	bl	8004c30 <siprintf>
    HAL_UART_Transmit(&huart1, str2, sizeof(str2), 500);
 8000f62:	f107 0110 	add.w	r1, r7, #16
 8000f66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f6a:	2232      	movs	r2, #50	; 0x32
 8000f6c:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <ConfigAndPrint+0x10c>)
 8000f6e:	f002 fe7f 	bl	8003c70 <HAL_UART_Transmit>
    memset(str2, 0, sizeof(str2));
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2232      	movs	r2, #50	; 0x32
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fdc2 	bl	8004b04 <memset>

    Flash_Write_Array(flashAddress, (uint8_t*)&Rx_Config_1, index);
 8000f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	4915      	ldr	r1, [pc, #84]	; (8000fdc <ConfigAndPrint+0x110>)
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff faa7 	bl	80004dc <Flash_Write_Array>
    memset(Rx_Config_1, 0, sizeof(Rx_Config_1));
 8000f8e:	2214      	movs	r2, #20
 8000f90:	2100      	movs	r1, #0
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <ConfigAndPrint+0x110>)
 8000f94:	f003 fdb6 	bl	8004b04 <memset>
    memset(arr_r, 0, sizeof(arr_r));
 8000f98:	2214      	movs	r2, #20
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <ConfigAndPrint+0x118>)
 8000f9e:	f003 fdb1 	bl	8004b04 <memset>

    sprintf(str2,"Done\n");
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4910      	ldr	r1, [pc, #64]	; (8000fe8 <ConfigAndPrint+0x11c>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fe41 	bl	8004c30 <siprintf>
    HAL_UART_Transmit(&huart1, str2, sizeof(str2), 500);
 8000fae:	f107 0110 	add.w	r1, r7, #16
 8000fb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb6:	2232      	movs	r2, #50	; 0x32
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <ConfigAndPrint+0x10c>)
 8000fba:	f002 fe59 	bl	8003c70 <HAL_UART_Transmit>
    memset(str2, 0, sizeof(str2));
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2232      	movs	r2, #50	; 0x32
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fd9c 	bl	8004b04 <memset>

}
 8000fcc:	bf00      	nop
 8000fce:	3748      	adds	r7, #72	; 0x48
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08006038 	.word	0x08006038
 8000fd8:	20000224 	.word	0x20000224
 8000fdc:	20000148 	.word	0x20000148
 8000fe0:	08006044 	.word	0x08006044
 8000fe4:	20000134 	.word	0x20000134
 8000fe8:	0800604c 	.word	0x0800604c

08000fec <PrintConfig>:

void PrintConfig(const char *value_config, uint32_t flashAddress,size_t value_size){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b092      	sub	sp, #72	; 0x48
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
    Flash_Read_Array(flashAddress, (uint8_t*)&arr_r, value_size);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4912      	ldr	r1, [pc, #72]	; (8001048 <PrintConfig+0x5c>)
 8001000:	68b8      	ldr	r0, [r7, #8]
 8001002:	f7ff fa99 	bl	8000538 <Flash_Read_Array>
    uint8_t str2[50]="";
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	222e      	movs	r2, #46	; 0x2e
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fd76 	bl	8004b04 <memset>
    sprintf(str2,"%s: %s\n",value_config, arr_r);
 8001018:	f107 0014 	add.w	r0, r7, #20
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <PrintConfig+0x5c>)
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	490a      	ldr	r1, [pc, #40]	; (800104c <PrintConfig+0x60>)
 8001022:	f003 fe05 	bl	8004c30 <siprintf>
    HAL_UART_Transmit(&huart1, str2, sizeof(str2), 500);
 8001026:	f107 0114 	add.w	r1, r7, #20
 800102a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102e:	2232      	movs	r2, #50	; 0x32
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <PrintConfig+0x64>)
 8001032:	f002 fe1d 	bl	8003c70 <HAL_UART_Transmit>
    memset(arr_r, 0, sizeof(arr_r));
 8001036:	2214      	movs	r2, #20
 8001038:	2100      	movs	r1, #0
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <PrintConfig+0x5c>)
 800103c:	f003 fd62 	bl	8004b04 <memset>
}
 8001040:	bf00      	nop
 8001042:	3748      	adds	r7, #72	; 0x48
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000134 	.word	0x20000134
 800104c:	08006054 	.word	0x08006054
 8001050:	20000224 	.word	0x20000224

08001054 <PrintConfig_All>:
void PrintConfig_All(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	  PrintConfig("HOST", ADDRESS_DATA_HOST,sizeof(Host));
 8001058:	220f      	movs	r2, #15
 800105a:	4912      	ldr	r1, [pc, #72]	; (80010a4 <PrintConfig_All+0x50>)
 800105c:	4812      	ldr	r0, [pc, #72]	; (80010a8 <PrintConfig_All+0x54>)
 800105e:	f7ff ffc5 	bl	8000fec <PrintConfig>
	  PrintConfig("PORT", ADDRESS_DATA_PORT,sizeof(Port));
 8001062:	2205      	movs	r2, #5
 8001064:	4911      	ldr	r1, [pc, #68]	; (80010ac <PrintConfig_All+0x58>)
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <PrintConfig_All+0x5c>)
 8001068:	f7ff ffc0 	bl	8000fec <PrintConfig>
	  PrintConfig("MQTT_PORT", ADDRESS_DATA_MQTT_PORT,sizeof(MQTT_port));
 800106c:	2205      	movs	r2, #5
 800106e:	4911      	ldr	r1, [pc, #68]	; (80010b4 <PrintConfig_All+0x60>)
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <PrintConfig_All+0x64>)
 8001072:	f7ff ffbb 	bl	8000fec <PrintConfig>
	  PrintConfig("USERNAME", ADDRESS_DATA_USERNAME,sizeof(Username));
 8001076:	220a      	movs	r2, #10
 8001078:	4910      	ldr	r1, [pc, #64]	; (80010bc <PrintConfig_All+0x68>)
 800107a:	4811      	ldr	r0, [pc, #68]	; (80010c0 <PrintConfig_All+0x6c>)
 800107c:	f7ff ffb6 	bl	8000fec <PrintConfig>
	  PrintConfig("PASSWORD", ADDRESS_DATA_PASSWORD,sizeof(Password));
 8001080:	2205      	movs	r2, #5
 8001082:	4910      	ldr	r1, [pc, #64]	; (80010c4 <PrintConfig_All+0x70>)
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <PrintConfig_All+0x74>)
 8001086:	f7ff ffb1 	bl	8000fec <PrintConfig>
	  PrintConfig("DEVICE_PROFILE", ADDRESS_DATA_DEVICE_PROFILE,sizeof(Device_Profile));
 800108a:	2204      	movs	r2, #4
 800108c:	490f      	ldr	r1, [pc, #60]	; (80010cc <PrintConfig_All+0x78>)
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <PrintConfig_All+0x7c>)
 8001090:	f7ff ffac 	bl	8000fec <PrintConfig>
	  Flash_Read_Array(ADDRESS_DATA_DEVICE_PROFILE, (uint8_t*)&Profile, sizeof(Profile));
 8001094:	2204      	movs	r2, #4
 8001096:	490f      	ldr	r1, [pc, #60]	; (80010d4 <PrintConfig_All+0x80>)
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <PrintConfig_All+0x78>)
 800109a:	f7ff fa4d 	bl	8000538 <Flash_Read_Array>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08004000 	.word	0x08004000
 80010a8:	08005ef8 	.word	0x08005ef8
 80010ac:	08008000 	.word	0x08008000
 80010b0:	08005f00 	.word	0x08005f00
 80010b4:	0800c000 	.word	0x0800c000
 80010b8:	08005f08 	.word	0x08005f08
 80010bc:	08010000 	.word	0x08010000
 80010c0:	08005f14 	.word	0x08005f14
 80010c4:	08014000 	.word	0x08014000
 80010c8:	08005f20 	.word	0x08005f20
 80010cc:	08018000 	.word	0x08018000
 80010d0:	08005f2c 	.word	0x08005f2c
 80010d4:	20000178 	.word	0x20000178

080010d8 <_write>:
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <_write+0x28>)
 80010f0:	f002 fdbe 	bl	8003c70 <HAL_UART_Transmit>
  return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000224 	.word	0x20000224

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_MspInit+0x58>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_MspInit+0x58>)
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001120:	6253      	str	r3, [r2, #36]	; 0x24
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_MspInit+0x58>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_MspInit+0x58>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_MspInit+0x58>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_MspInit+0x58>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x58>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_MspInit+0x58>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_MspInit+0x58>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_SPI_MspInit+0x8c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d130      	bne.n	80011f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_SPI_MspInit+0x90>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_SPI_MspInit+0x90>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6253      	str	r3, [r2, #36]	; 0x24
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x90>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_SPI_MspInit+0x90>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d0:	2305      	movs	r3, #5
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_SPI_MspInit+0x94>)
 80011dc:	f001 f86e 	bl	80022bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2024      	movs	r0, #36	; 0x24
 80011e6:	f000 fe04 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011ea:	2024      	movs	r0, #36	; 0x24
 80011ec:	f000 fe1d 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40003800 	.word	0x40003800
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020400 	.word	0x40020400

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_UART_MspInit+0x8c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d130      	bne.n	8001288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_MspInit+0x90>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6213      	str	r3, [r2, #32]
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x90>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x90>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001256:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001268:	2307      	movs	r3, #7
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x94>)
 8001274:	f001 f822 	bl	80022bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2025      	movs	r0, #37	; 0x25
 800127e:	f000 fdb8 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001282:	2025      	movs	r0, #37	; 0x25
 8001284:	f000 fdd1 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40013800 	.word	0x40013800
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 fc71 	bl	8001bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <SPI2_IRQHandler+0x10>)
 80012f2:	f002 fa9f 	bl	8003834 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001cc 	.word	0x200001cc

08001300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART1_IRQHandler+0x10>)
 8001306:	f002 fded 	bl	8003ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000224 	.word	0x20000224

08001314 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001326:	f3af 8000 	nop.w
 800132a:	4601      	mov	r1, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf0      	blt.n	8001326 <_read+0x12>
  }

  return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:
  }
  return len;
}

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001374:	605a      	str	r2, [r3, #4]
  return 0;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f003 fb56 	bl	8004a90 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20008000 	.word	0x20008000
 8001410:	00000400 	.word	0x00000400
 8001414:	2000026c 	.word	0x2000026c
 8001418:	200002c8 	.word	0x200002c8

0800141c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001432:	f107 020f 	add.w	r2, r7, #15
 8001436:	1df9      	adds	r1, r7, #7
 8001438:	2364      	movs	r3, #100	; 0x64
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <W25qxx_Spi+0x28>)
 8001440:	f002 f847 	bl	80034d2 <HAL_SPI_TransmitReceive>
	return ret;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001cc 	.word	0x200001cc

08001454 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <W25qxx_ReadID+0x6c>)
 8001472:	f001 f8a3 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001476:	209f      	movs	r0, #159	; 0x9f
 8001478:	f7ff ffd6 	bl	8001428 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800147c:	20a5      	movs	r0, #165	; 0xa5
 800147e:	f7ff ffd3 	bl	8001428 <W25qxx_Spi>
 8001482:	4603      	mov	r3, r0
 8001484:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001486:	20a5      	movs	r0, #165	; 0xa5
 8001488:	f7ff ffce 	bl	8001428 <W25qxx_Spi>
 800148c:	4603      	mov	r3, r0
 800148e:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001490:	20a5      	movs	r0, #165	; 0xa5
 8001492:	f7ff ffc9 	bl	8001428 <W25qxx_Spi>
 8001496:	4603      	mov	r3, r0
 8001498:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <W25qxx_ReadID+0x6c>)
 80014a2:	f001 f88b 	bl	80025bc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	4313      	orrs	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
	return Temp;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40020400 	.word	0x40020400

080014c4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <W25qxx_ReadUniqID+0x68>)
 80014d2:	f001 f873 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80014d6:	204b      	movs	r0, #75	; 0x4b
 80014d8:	f7ff ffa6 	bl	8001428 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	e005      	b.n	80014ee <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014e2:	20a5      	movs	r0, #165	; 0xa5
 80014e4:	f7ff ffa0 	bl	8001428 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	3301      	adds	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d9f6      	bls.n	80014e2 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	71bb      	strb	r3, [r7, #6]
 80014f8:	e00b      	b.n	8001512 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014fa:	79bc      	ldrb	r4, [r7, #6]
 80014fc:	20a5      	movs	r0, #165	; 0xa5
 80014fe:	f7ff ff93 	bl	8001428 <W25qxx_Spi>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <W25qxx_ReadUniqID+0x6c>)
 8001508:	4423      	add	r3, r4
 800150a:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	3301      	adds	r3, #1
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	2b07      	cmp	r3, #7
 8001516:	d9f0      	bls.n	80014fa <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <W25qxx_ReadUniqID+0x68>)
 8001520:	f001 f84c 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	40020400 	.word	0x40020400
 8001530:	20000270 	.word	0x20000270

08001534 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <W25qxx_WriteEnable+0x2c>)
 8001540:	f001 f83c 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001544:	2006      	movs	r0, #6
 8001546:	f7ff ff6f 	bl	8001428 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <W25qxx_WriteEnable+0x2c>)
 8001552:	f001 f833 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f000 fb52 	bl	8001c00 <HAL_Delay>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020400 	.word	0x40020400

08001564 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <W25qxx_ReadStatusRegister+0x88>)
 800157a:	f001 f81f 	bl	80025bc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10c      	bne.n	800159e <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001584:	2005      	movs	r0, #5
 8001586:	f7ff ff4f 	bl	8001428 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800158a:	20a5      	movs	r0, #165	; 0xa5
 800158c:	f7ff ff4c 	bl	8001428 <W25qxx_Spi>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <W25qxx_ReadStatusRegister+0x8c>)
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800159c:	e01b      	b.n	80015d6 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d10c      	bne.n	80015be <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 80015a4:	2035      	movs	r0, #53	; 0x35
 80015a6:	f7ff ff3f 	bl	8001428 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80015aa:	20a5      	movs	r0, #165	; 0xa5
 80015ac:	f7ff ff3c 	bl	8001428 <W25qxx_Spi>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <W25qxx_ReadStatusRegister+0x8c>)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80015bc:	e00b      	b.n	80015d6 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80015be:	2015      	movs	r0, #21
 80015c0:	f7ff ff32 	bl	8001428 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80015c4:	20a5      	movs	r0, #165	; 0xa5
 80015c6:	f7ff ff2f 	bl	8001428 <W25qxx_Spi>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <W25qxx_ReadStatusRegister+0x8c>)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <W25qxx_ReadStatusRegister+0x88>)
 80015de:	f000 ffed 	bl	80025bc <HAL_GPIO_WritePin>
	return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020400 	.word	0x40020400
 80015f0:	20000270 	.word	0x20000270

080015f4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 fb01 	bl	8001c00 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	480f      	ldr	r0, [pc, #60]	; (8001644 <W25qxx_WaitForWriteEnd+0x50>)
 8001606:	f000 ffd9 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800160a:	2005      	movs	r0, #5
 800160c:	f7ff ff0c 	bl	8001428 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001610:	20a5      	movs	r0, #165	; 0xa5
 8001612:	f7ff ff09 	bl	8001428 <W25qxx_Spi>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <W25qxx_WaitForWriteEnd+0x54>)
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f000 faed 	bl	8001c00 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <W25qxx_WaitForWriteEnd+0x54>)
 8001628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ed      	bne.n	8001610 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <W25qxx_WaitForWriteEnd+0x50>)
 800163c:	f000 ffbe 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020400 	.word	0x40020400
 8001648:	20000270 	.word	0x20000270

0800164c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001652:	4b90      	ldr	r3, [pc, #576]	; (8001894 <W25qxx_Init+0x248>)
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800165a:	e002      	b.n	8001662 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f000 facf 	bl	8001c00 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8001662:	f000 fac3 	bl	8001bec <HAL_GetTick>
 8001666:	4603      	mov	r3, r0
 8001668:	2b63      	cmp	r3, #99	; 0x63
 800166a:	d9f7      	bls.n	800165c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001672:	4889      	ldr	r0, [pc, #548]	; (8001898 <W25qxx_Init+0x24c>)
 8001674:	f000 ffa2 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001678:	2064      	movs	r0, #100	; 0x64
 800167a:	f000 fac1 	bl	8001c00 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800167e:	4887      	ldr	r0, [pc, #540]	; (800189c <W25qxx_Init+0x250>)
 8001680:	f003 face 	bl	8004c20 <puts>
#endif
	id = W25qxx_ReadID();
 8001684:	f7ff fee6 	bl	8001454 <W25qxx_ReadID>
 8001688:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4884      	ldr	r0, [pc, #528]	; (80018a0 <W25qxx_Init+0x254>)
 800168e:	f003 fa41 	bl	8004b14 <iprintf>
#endif
	switch (id & 0x000000FF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	3b11      	subs	r3, #17
 8001698:	2b0f      	cmp	r3, #15
 800169a:	f200 808a 	bhi.w	80017b2 <W25qxx_Init+0x166>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <W25qxx_Init+0x58>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	0800179f 	.word	0x0800179f
 80016a8:	0800178b 	.word	0x0800178b
 80016ac:	08001777 	.word	0x08001777
 80016b0:	08001763 	.word	0x08001763
 80016b4:	0800174f 	.word	0x0800174f
 80016b8:	0800173b 	.word	0x0800173b
 80016bc:	08001727 	.word	0x08001727
 80016c0:	08001711 	.word	0x08001711
 80016c4:	080016fb 	.word	0x080016fb
 80016c8:	080017b3 	.word	0x080017b3
 80016cc:	080017b3 	.word	0x080017b3
 80016d0:	080017b3 	.word	0x080017b3
 80016d4:	080017b3 	.word	0x080017b3
 80016d8:	080017b3 	.word	0x080017b3
 80016dc:	080017b3 	.word	0x080017b3
 80016e0:	080016e5 	.word	0x080016e5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80016e4:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <W25qxx_Init+0x248>)
 80016e6:	220a      	movs	r2, #10
 80016e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <W25qxx_Init+0x248>)
 80016ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80016f2:	486c      	ldr	r0, [pc, #432]	; (80018a4 <W25qxx_Init+0x258>)
 80016f4:	f003 fa94 	bl	8004c20 <puts>
#endif
		break;
 80016f8:	e064      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <W25qxx_Init+0x248>)
 80016fc:	2209      	movs	r2, #9
 80016fe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001700:	4b64      	ldr	r3, [pc, #400]	; (8001894 <W25qxx_Init+0x248>)
 8001702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001706:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8001708:	4867      	ldr	r0, [pc, #412]	; (80018a8 <W25qxx_Init+0x25c>)
 800170a:	f003 fa89 	bl	8004c20 <puts>
#endif
		break;
 800170e:	e059      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001710:	4b60      	ldr	r3, [pc, #384]	; (8001894 <W25qxx_Init+0x248>)
 8001712:	2208      	movs	r2, #8
 8001714:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001716:	4b5f      	ldr	r3, [pc, #380]	; (8001894 <W25qxx_Init+0x248>)
 8001718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800171e:	4863      	ldr	r0, [pc, #396]	; (80018ac <W25qxx_Init+0x260>)
 8001720:	f003 fa7e 	bl	8004c20 <puts>
#endif
		break;
 8001724:	e04e      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001726:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <W25qxx_Init+0x248>)
 8001728:	2207      	movs	r2, #7
 800172a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <W25qxx_Init+0x248>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8001732:	485f      	ldr	r0, [pc, #380]	; (80018b0 <W25qxx_Init+0x264>)
 8001734:	f003 fa74 	bl	8004c20 <puts>
#endif
		break;
 8001738:	e044      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800173a:	4b56      	ldr	r3, [pc, #344]	; (8001894 <W25qxx_Init+0x248>)
 800173c:	2206      	movs	r2, #6
 800173e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001740:	4b54      	ldr	r3, [pc, #336]	; (8001894 <W25qxx_Init+0x248>)
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8001746:	485b      	ldr	r0, [pc, #364]	; (80018b4 <W25qxx_Init+0x268>)
 8001748:	f003 fa6a 	bl	8004c20 <puts>
#endif
		break;
 800174c:	e03a      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800174e:	4b51      	ldr	r3, [pc, #324]	; (8001894 <W25qxx_Init+0x248>)
 8001750:	2205      	movs	r2, #5
 8001752:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <W25qxx_Init+0x248>)
 8001756:	2220      	movs	r2, #32
 8001758:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800175a:	4857      	ldr	r0, [pc, #348]	; (80018b8 <W25qxx_Init+0x26c>)
 800175c:	f003 fa60 	bl	8004c20 <puts>
#endif
		break;
 8001760:	e030      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <W25qxx_Init+0x248>)
 8001764:	2204      	movs	r2, #4
 8001766:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001768:	4b4a      	ldr	r3, [pc, #296]	; (8001894 <W25qxx_Init+0x248>)
 800176a:	2210      	movs	r2, #16
 800176c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800176e:	4853      	ldr	r0, [pc, #332]	; (80018bc <W25qxx_Init+0x270>)
 8001770:	f003 fa56 	bl	8004c20 <puts>
#endif
		break;
 8001774:	e026      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <W25qxx_Init+0x248>)
 8001778:	2203      	movs	r2, #3
 800177a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <W25qxx_Init+0x248>)
 800177e:	2208      	movs	r2, #8
 8001780:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8001782:	484f      	ldr	r0, [pc, #316]	; (80018c0 <W25qxx_Init+0x274>)
 8001784:	f003 fa4c 	bl	8004c20 <puts>
#endif
		break;
 8001788:	e01c      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <W25qxx_Init+0x248>)
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001790:	4b40      	ldr	r3, [pc, #256]	; (8001894 <W25qxx_Init+0x248>)
 8001792:	2204      	movs	r2, #4
 8001794:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8001796:	484b      	ldr	r0, [pc, #300]	; (80018c4 <W25qxx_Init+0x278>)
 8001798:	f003 fa42 	bl	8004c20 <puts>
#endif
		break;
 800179c:	e012      	b.n	80017c4 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <W25qxx_Init+0x248>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <W25qxx_Init+0x248>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80017aa:	4847      	ldr	r0, [pc, #284]	; (80018c8 <W25qxx_Init+0x27c>)
 80017ac:	f003 fa38 	bl	8004c20 <puts>
#endif
		break;
 80017b0:	e008      	b.n	80017c4 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80017b2:	4846      	ldr	r0, [pc, #280]	; (80018cc <W25qxx_Init+0x280>)
 80017b4:	f003 fa34 	bl	8004c20 <puts>
#endif
		w25qxx.Lock = 0;
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <W25qxx_Init+0x248>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e063      	b.n	800188c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <W25qxx_Init+0x248>)
 80017c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ca:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80017cc:	4b31      	ldr	r3, [pc, #196]	; (8001894 <W25qxx_Init+0x248>)
 80017ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80017d4:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <W25qxx_Init+0x248>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4a2e      	ldr	r2, [pc, #184]	; (8001894 <W25qxx_Init+0x248>)
 80017dc:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <W25qxx_Init+0x248>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <W25qxx_Init+0x248>)
 80017e4:	6912      	ldr	r2, [r2, #16]
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <W25qxx_Init+0x248>)
 80017ec:	8952      	ldrh	r2, [r2, #10]
 80017ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80017f2:	4a28      	ldr	r2, [pc, #160]	; (8001894 <W25qxx_Init+0x248>)
 80017f4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <W25qxx_Init+0x248>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <W25qxx_Init+0x248>)
 80017fe:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <W25qxx_Init+0x248>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	4a23      	ldr	r2, [pc, #140]	; (8001894 <W25qxx_Init+0x248>)
 8001806:	6912      	ldr	r2, [r2, #16]
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	0a9b      	lsrs	r3, r3, #10
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <W25qxx_Init+0x248>)
 8001810:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001812:	f7ff fe57 	bl	80014c4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff fea4 	bl	8001564 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff fea1 	bl	8001564 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001822:	2003      	movs	r0, #3
 8001824:	f7ff fe9e 	bl	8001564 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <W25qxx_Init+0x248>)
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	4619      	mov	r1, r3
 800182e:	4828      	ldr	r0, [pc, #160]	; (80018d0 <W25qxx_Init+0x284>)
 8001830:	f003 f970 	bl	8004b14 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <W25qxx_Init+0x248>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4619      	mov	r1, r3
 800183a:	4826      	ldr	r0, [pc, #152]	; (80018d4 <W25qxx_Init+0x288>)
 800183c:	f003 f96a 	bl	8004b14 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <W25qxx_Init+0x248>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4619      	mov	r1, r3
 8001846:	4824      	ldr	r0, [pc, #144]	; (80018d8 <W25qxx_Init+0x28c>)
 8001848:	f003 f964 	bl	8004b14 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <W25qxx_Init+0x248>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4619      	mov	r1, r3
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <W25qxx_Init+0x290>)
 8001854:	f003 f95e 	bl	8004b14 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <W25qxx_Init+0x248>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4619      	mov	r1, r3
 800185e:	4820      	ldr	r0, [pc, #128]	; (80018e0 <W25qxx_Init+0x294>)
 8001860:	f003 f958 	bl	8004b14 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <W25qxx_Init+0x248>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4619      	mov	r1, r3
 800186a:	481e      	ldr	r0, [pc, #120]	; (80018e4 <W25qxx_Init+0x298>)
 800186c:	f003 f952 	bl	8004b14 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <W25qxx_Init+0x248>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4619      	mov	r1, r3
 8001876:	481c      	ldr	r0, [pc, #112]	; (80018e8 <W25qxx_Init+0x29c>)
 8001878:	f003 f94c 	bl	8004b14 <iprintf>
	printf("w25qxx Init Done\r\n");
 800187c:	481b      	ldr	r0, [pc, #108]	; (80018ec <W25qxx_Init+0x2a0>)
 800187e:	f003 f9cf 	bl	8004c20 <puts>
#endif
	w25qxx.Lock = 0;
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <W25qxx_Init+0x248>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000270 	.word	0x20000270
 8001898:	40020400 	.word	0x40020400
 800189c:	0800605c 	.word	0x0800605c
 80018a0:	08006074 	.word	0x08006074
 80018a4:	08006088 	.word	0x08006088
 80018a8:	080060a0 	.word	0x080060a0
 80018ac:	080060b8 	.word	0x080060b8
 80018b0:	080060d0 	.word	0x080060d0
 80018b4:	080060e8 	.word	0x080060e8
 80018b8:	08006100 	.word	0x08006100
 80018bc:	08006118 	.word	0x08006118
 80018c0:	08006130 	.word	0x08006130
 80018c4:	08006148 	.word	0x08006148
 80018c8:	08006160 	.word	0x08006160
 80018cc:	08006178 	.word	0x08006178
 80018d0:	0800618c 	.word	0x0800618c
 80018d4:	080061ac 	.word	0x080061ac
 80018d8:	080061c4 	.word	0x080061c4
 80018dc:	080061e4 	.word	0x080061e4
 80018e0:	08006200 	.word	0x08006200
 80018e4:	08006220 	.word	0x08006220
 80018e8:	0800623c 	.word	0x0800623c
 80018ec:	0800625c 	.word	0x0800625c

080018f0 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 80018f6:	e002      	b.n	80018fe <W25qxx_EraseChip+0xe>
		W25qxx_Delay(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f000 f981 	bl	8001c00 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <W25qxx_EraseChip+0x7c>)
 8001900:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001904:	2b01      	cmp	r3, #1
 8001906:	d0f7      	beq.n	80018f8 <W25qxx_EraseChip+0x8>
	w25qxx.Lock = 1;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <W25qxx_EraseChip+0x7c>)
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8001910:	f000 f96c 	bl	8001bec <HAL_GetTick>
 8001914:	6078      	str	r0, [r7, #4]
	printf("w25qxx EraseChip Begin...\r\n");
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <W25qxx_EraseChip+0x80>)
 8001918:	f003 f982 	bl	8004c20 <puts>
#endif
	W25qxx_WriteEnable();
 800191c:	f7ff fe0a 	bl	8001534 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <W25qxx_EraseChip+0x84>)
 8001928:	f000 fe48 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 800192c:	20c7      	movs	r0, #199	; 0xc7
 800192e:	f7ff fd7b 	bl	8001428 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	480e      	ldr	r0, [pc, #56]	; (8001974 <W25qxx_EraseChip+0x84>)
 800193a:	f000 fe3f 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800193e:	f7ff fe59 	bl	80015f4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseChip done after %d ms!\r\n", HAL_GetTick() - StartTime);
 8001942:	f000 f953 	bl	8001bec <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4619      	mov	r1, r3
 800194e:	480a      	ldr	r0, [pc, #40]	; (8001978 <W25qxx_EraseChip+0x88>)
 8001950:	f003 f8e0 	bl	8004b14 <iprintf>
#endif
	W25qxx_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f000 f953 	bl	8001c00 <HAL_Delay>
	w25qxx.Lock = 0;
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <W25qxx_EraseChip+0x7c>)
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000270 	.word	0x20000270
 8001970:	08006270 	.word	0x08006270
 8001974:	40020400 	.word	0x40020400
 8001978:	0800628c 	.word	0x0800628c

0800197c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800198a:	e002      	b.n	8001992 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 f937 	bl	8001c00 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <W25qxx_WritePage+0x140>)
 8001994:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001998:	2b01      	cmp	r3, #1
 800199a:	d0f7      	beq.n	800198c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <W25qxx_WritePage+0x140>)
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
//	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
//		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
//	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
//		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	4845      	ldr	r0, [pc, #276]	; (8001ac0 <W25qxx_WritePage+0x144>)
 80019ac:	f003 f8b2 	bl	8004b14 <iprintf>
	W25qxx_Delay(100);
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	f000 f925 	bl	8001c00 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 80019b6:	f000 f919 	bl	8001bec <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80019bc:	f7ff fe1a 	bl	80015f4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80019c0:	f7ff fdb8 	bl	8001534 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ca:	483e      	ldr	r0, [pc, #248]	; (8001ac4 <W25qxx_WritePage+0x148>)
 80019cc:	f000 fdf6 	bl	80025bc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <W25qxx_WritePage+0x140>)
 80019d2:	895b      	ldrh	r3, [r3, #10]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <W25qxx_WritePage+0x140>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d909      	bls.n	80019fe <W25qxx_WritePage+0x82>
	{
		W25qxx_Spi(0x12);
 80019ea:	2012      	movs	r0, #18
 80019ec:	f7ff fd1c 	bl	8001428 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	0e1b      	lsrs	r3, r3, #24
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fd16 	bl	8001428 <W25qxx_Spi>
 80019fc:	e002      	b.n	8001a04 <W25qxx_WritePage+0x88>
	}
	else
	{
		W25qxx_Spi(0x02);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fd12 	bl	8001428 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd0c 	bl	8001428 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fd06 	bl	8001428 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fd01 	bl	8001428 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	68f9      	ldr	r1, [r7, #12]
 8001a2e:	4826      	ldr	r0, [pc, #152]	; (8001ac8 <W25qxx_WritePage+0x14c>)
 8001a30:	f001 fc0c 	bl	800324c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3a:	4822      	ldr	r0, [pc, #136]	; (8001ac4 <W25qxx_WritePage+0x148>)
 8001a3c:	f000 fdbe 	bl	80025bc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001a40:	f7ff fdd8 	bl	80015f4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8001a44:	f000 f8d2 	bl	8001bec <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e018      	b.n	8001a88 <W25qxx_WritePage+0x10c>
	{
		if ((i % 8 == 0) && (i > 2))
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <W25qxx_WritePage+0xf6>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d905      	bls.n	8001a72 <W25qxx_WritePage+0xf6>
		{
			printf("\r\n");
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <W25qxx_WritePage+0x150>)
 8001a68:	f003 f8da 	bl	8004c20 <puts>
			W25qxx_Delay(10);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f000 f8c7 	bl	8001c00 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <W25qxx_WritePage+0x154>)
 8001a7e:	f003 f849 	bl	8004b14 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3e2      	bcc.n	8001a56 <W25qxx_WritePage+0xda>
	}
	printf("\r\n");
 8001a90:	480e      	ldr	r0, [pc, #56]	; (8001acc <W25qxx_WritePage+0x150>)
 8001a92:	f003 f8c5 	bl	8004c20 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <W25qxx_WritePage+0x158>)
 8001a9a:	f003 f83b 	bl	8004b14 <iprintf>
	W25qxx_Delay(100);
 8001a9e:	2064      	movs	r0, #100	; 0x64
 8001aa0:	f000 f8ae 	bl	8001c00 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f000 f8ab 	bl	8001c00 <HAL_Delay>
	w25qxx.Lock = 0;
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <W25qxx_WritePage+0x140>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000270 	.word	0x20000270
 8001ac0:	0800653c 	.word	0x0800653c
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	200001cc 	.word	0x200001cc
 8001acc:	08006578 	.word	0x08006578
 8001ad0:	0800657c 	.word	0x0800657c
 8001ad4:	08006584 	.word	0x08006584

08001ad8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff fca0 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af4:	4c09      	ldr	r4, [pc, #36]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f002 ffcb 	bl	8004a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b06:	f7fe fea5 	bl	8000854 <main>
  bx lr
 8001b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001b14:	08006974 	.word	0x08006974
  ldr r2, =_sbss
 8001b18:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001b1c:	200002c4 	.word	0x200002c4

08001b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_IRQHandler>

08001b22 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f955 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f80e 	bl	8001b54 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	e001      	b.n	8001b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b44:	f7ff fae4 	bl	8001110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b48:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_InitTick+0x68>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d022      	beq.n	8001bae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_InitTick+0x6c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x68>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f962 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d809      	bhi.n	8001ba2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	f04f 30ff 	mov.w	r0, #4294967295
 8001b96:	f000 f92c 	bl	8001df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_InitTick+0x70>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e004      	b.n	8001bb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000ac 	.word	0x200000ac
 8001bc0:	200000a4 	.word	0x200000a4
 8001bc4:	200000a8 	.word	0x200000a8

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x20>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x1c>)
 8001bd8:	6013      	str	r3, [r2, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000298 	.word	0x20000298
 8001be8:	200000ac 	.word	0x200000ac

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000298 	.word	0x20000298

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff fff0 	bl	8001bec <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d004      	beq.n	8001c24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_Delay+0x40>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4413      	add	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c24:	bf00      	nop
 8001c26:	f7ff ffe1 	bl	8001bec <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d8f7      	bhi.n	8001c26 <HAL_Delay+0x26>
  {
  }
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000ac 	.word	0x200000ac

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <__NVIC_EnableIRQ+0x34>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2d 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff42 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d008      	beq.n	8001e88 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e022      	b.n	8001ece <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 020e 	bic.w	r2, r2, #14
 8001e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f003 021c 	and.w	r2, r3, #28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d005      	beq.n	8001efc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e029      	b.n	8001f50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 020e 	bic.w	r2, r2, #14
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 021c 	and.w	r2, r3, #28
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
    }
  }
  return status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_FLASH_Program+0x5c>)
 8001f6e:	7c1b      	ldrb	r3, [r3, #16]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_FLASH_Program+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e01b      	b.n	8001fb0 <HAL_FLASH_Program+0x54>
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_FLASH_Program+0x5c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f82:	f000 f865 	bl	8002050 <FLASH_WaitForLastOperation>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_FLASH_Program+0x4c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_FLASH_Program+0x5c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fa0:	f000 f856 	bl	8002050 <FLASH_WaitForLastOperation>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <HAL_FLASH_Program+0x5c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	741a      	strb	r2, [r3, #16]

  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000029c 	.word	0x2000029c

08001fbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d121      	bne.n	8002010 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_FLASH_Unlock+0x64>)
 8001fdc:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001fe0:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_FLASH_Unlock+0x68>)
 8001fe2:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e00e      	b.n	8002012 <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <HAL_FLASH_Unlock+0x6c>)
 8001ff8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_FLASH_Unlock+0x70>)
 8001ffe:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_FLASH_Unlock+0x60>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d101      	bne.n	8002010 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00
 8002020:	89abcdef 	.word	0x89abcdef
 8002024:	02030405 	.word	0x02030405
 8002028:	8c9daebf 	.word	0x8c9daebf
 800202c:	13141516 	.word	0x13141516

08002030 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_FLASH_Lock+0x1c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_FLASH_Lock+0x1c>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff fdc8 	bl	8001bec <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800205e:	e010      	b.n	8002082 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d00c      	beq.n	8002082 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <FLASH_WaitForLastOperation+0x2e>
 800206e:	f7ff fdbd 	bl	8001bec <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d201      	bcs.n	8002082 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e036      	b.n	80020f0 <FLASH_WaitForLastOperation+0xa0>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d0e8      	beq.n	8002060 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d102      	bne.n	80020a0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 800209c:	2202      	movs	r2, #2
 800209e:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ac:	d01b      	beq.n	80020e6 <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ba:	d014      	beq.n	80020e6 <FLASH_WaitForLastOperation+0x96>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80020c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c8:	d00d      	beq.n	80020e6 <FLASH_WaitForLastOperation+0x96>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d006      	beq.n	80020e6 <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <FLASH_WaitForLastOperation+0xa8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d103      	bne.n	80020ee <FLASH_WaitForLastOperation+0x9e>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80020e6:	f000 f809 	bl	80020fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <FLASH_WaitForLastOperation+0xa0>
  }

  /* There is no error flag set */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40023c00 	.word	0x40023c00

080020fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002112:	d109      	bne.n	8002128 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 800211e:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d109      	bne.n	800214a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 8002140:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002148:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002156:	d109      	bne.n	800216c <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 8002162:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216a:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002178:	d109      	bne.n	800218e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 8002184:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800218c:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219a:	d109      	bne.n	80021b0 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <FLASH_SetErrorCode+0xc8>)
 80021a6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ae:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <FLASH_SetErrorCode+0xc4>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6193      	str	r3, [r2, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	40023c00 	.word	0x40023c00
 80021c4:	2000029c 	.word	0x2000029c

080021c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_FLASHEx_Erase+0xa8>)
 80021dc:	7c1b      	ldrb	r3, [r3, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_FLASHEx_Erase+0x1e>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e040      	b.n	8002268 <HAL_FLASHEx_Erase+0xa0>
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_FLASHEx_Erase+0xa8>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021f0:	f7ff ff2e 	bl	8002050 <FLASH_WaitForLastOperation>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d130      	bne.n	8002260 <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	e01f      	b.n	800224e <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 800220e:	68b8      	ldr	r0, [r7, #8]
 8002210:	f000 f832 	bl	8002278 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002218:	f7ff ff1a 	bl	8002050 <FLASH_WaitForLastOperation>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_FLASHEx_Erase+0xac>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_FLASHEx_Erase+0xac>)
 8002226:	f023 0308 	bic.w	r3, r3, #8
 800222a:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_FLASHEx_Erase+0xac>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_FLASHEx_Erase+0xac>)
 8002232:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002236:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	601a      	str	r2, [r3, #0]
        break;
 8002244:	e00c      	b.n	8002260 <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800224c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	021a      	lsls	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4413      	add	r3, r2
    for(address = pEraseInit->PageAddress;
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3d6      	bcc.n	800220e <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_FLASHEx_Erase+0xa8>)
 8002262:	2200      	movs	r2, #0
 8002264:	741a      	strb	r2, [r3, #16]

  return status;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000029c 	.word	0x2000029c
 8002274:	40023c00 	.word	0x40023c00

08002278 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <FLASH_PageErase+0x3c>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <FLASH_PageErase+0x40>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <FLASH_PageErase+0x40>)
 800228c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002290:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <FLASH_PageErase+0x40>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <FLASH_PageErase+0x40>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022a4:	461a      	mov	r2, r3
 80022a6:	2300      	movs	r3, #0
 80022a8:	6013      	str	r3, [r2, #0]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	2000029c 	.word	0x2000029c
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022d2:	e154      	b.n	800257e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8146 	beq.w	8002578 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d005      	beq.n	8002304 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002300:	2b02      	cmp	r3, #2
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b03      	cmp	r3, #3
 8002370:	d017      	beq.n	80023a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80a0 	beq.w	8002578 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_GPIO_Init+0x2e0>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a57      	ldr	r2, [pc, #348]	; (800259c <HAL_GPIO_Init+0x2e0>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_GPIO_Init+0x2e0>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x2e4>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_GPIO_Init+0x2e8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d019      	beq.n	80024b0 <HAL_GPIO_Init+0x1f4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x2ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1f0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a49      	ldr	r2, [pc, #292]	; (80025ac <HAL_GPIO_Init+0x2f0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_GPIO_Init+0x2f4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_GPIO_Init+0x2f8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e4>
 800249c:	2304      	movs	r3, #4
 800249e:	e008      	b.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a4:	2303      	movs	r3, #3
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1f6>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024c2:	4937      	ldr	r1, [pc, #220]	; (80025a0 <HAL_GPIO_Init+0x2e4>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d0:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800251e:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002572:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_GPIO_Init+0x2fc>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f aea3 	bne.w	80022d4 <HAL_GPIO_Init+0x18>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e31d      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07b      	beq.n	8002716 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d006      	beq.n	8002632 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d10f      	bne.n	800264a <HAL_RCC_OscConfig+0x5e>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d10b      	bne.n	800264a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d06a      	beq.n	8002714 <HAL_RCC_OscConfig+0x128>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d166      	bne.n	8002714 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e2f7      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x74>
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7e      	ldr	r2, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e02d      	b.n	80026bc <HAL_RCC_OscConfig+0xd0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_OscConfig+0x96>
 8002668:	4b79      	ldr	r3, [pc, #484]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a78      	ldr	r2, [pc, #480]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e01c      	b.n	80026bc <HAL_RCC_OscConfig+0xd0>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b05      	cmp	r3, #5
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0xb8>
 800268a:	4b71      	ldr	r3, [pc, #452]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a70      	ldr	r2, [pc, #448]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xd0>
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fa92 	bl	8001bec <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff fa8e 	bl	8001bec <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e2ad      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xe0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7ff fa7e 	bl	8001bec <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7ff fa7a 	bl	8001bec <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e299      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x108>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d05a      	beq.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d005      	beq.n	8002734 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d119      	bne.n	8002762 <HAL_RCC_OscConfig+0x176>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x160>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e276      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	493d      	ldr	r1, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002760:	e03a      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d020      	beq.n	80027ac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCC_OscConfig+0x268>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fa3c 	bl	8001bec <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002778:	f7ff fa38 	bl	8001bec <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e257      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	492a      	ldr	r1, [pc, #168]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e015      	b.n	80027d8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_RCC_OscConfig+0x268>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff fa1b 	bl	8001bec <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff fa17 	bl	8001bec <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e236      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80b8 	beq.w	8002956 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d170      	bne.n	80028ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x218>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e21a      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002810:	429a      	cmp	r2, r3
 8002812:	d921      	bls.n	8002858 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fc3b 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e208      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4906      	ldr	r1, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	061b      	lsls	r3, r3, #24
 8002848:	4901      	ldr	r1, [pc, #4]	; (8002850 <HAL_RCC_OscConfig+0x264>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
 800284e:	e020      	b.n	8002892 <HAL_RCC_OscConfig+0x2a6>
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002858:	4b99      	ldr	r3, [pc, #612]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4996      	ldr	r1, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b95      	ldr	r3, [pc, #596]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	4991      	ldr	r1, [pc, #580]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fc06 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1d3      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	0b5b      	lsrs	r3, r3, #13
 8002898:	3301      	adds	r3, #1
 800289a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028a2:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	0912      	lsrs	r2, r2, #4
 80028a8:	f002 020f 	and.w	r2, r2, #15
 80028ac:	4985      	ldr	r1, [pc, #532]	; (8002ac4 <HAL_RCC_OscConfig+0x4d8>)
 80028ae:	5c8a      	ldrb	r2, [r1, r2]
 80028b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028b2:	4a85      	ldr	r2, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4dc>)
 80028b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028b6:	4b85      	ldr	r3, [pc, #532]	; (8002acc <HAL_RCC_OscConfig+0x4e0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f94a 	bl	8001b54 <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d045      	beq.n	8002956 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	e1b5      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d029      	beq.n	800292a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028d6:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCC_OscConfig+0x4e4>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff f986 	bl	8001bec <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e4:	f7ff f982 	bl	8001bec <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1a1      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002902:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	496c      	ldr	r1, [pc, #432]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002914:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4967      	ldr	r1, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800292a:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x4e4>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff f95c 	bl	8001bec <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002938:	f7ff f958 	bl	8001bec <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e177      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d030      	beq.n	80029c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7ff f93c 	bl	8001bec <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7ff f938 	bl	8001bec <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e157      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800298a:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x38c>
 8002996:	e015      	b.n	80029c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b4e      	ldr	r3, [pc, #312]	; (8002ad4 <HAL_RCC_OscConfig+0x4e8>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7ff f925 	bl	8001bec <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a6:	f7ff f921 	bl	8001bec <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e140      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80b5 	beq.w	8002b3c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	4a36      	ldr	r2, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6253      	str	r3, [r2, #36]	; 0x24
 80029ee:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f8e9 	bl	8001bec <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7ff f8e5 	bl	8001bec <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	; 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e104      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RCC_OscConfig+0x4ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x466>
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a50:	e02d      	b.n	8002aae <HAL_RCC_OscConfig+0x4c2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x488>
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a64:	6353      	str	r3, [r2, #52]	; 0x34
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a70:	6353      	str	r3, [r2, #52]	; 0x34
 8002a72:	e01c      	b.n	8002aae <HAL_RCC_OscConfig+0x4c2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x4aa>
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	6353      	str	r3, [r2, #52]	; 0x34
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6353      	str	r3, [r2, #52]	; 0x34
 8002a94:	e00b      	b.n	8002aae <HAL_RCC_OscConfig+0x4c2>
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x4d4>)
 8002aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aac:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d024      	beq.n	8002b00 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff f899 	bl	8001bec <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abc:	e019      	b.n	8002af2 <HAL_RCC_OscConfig+0x506>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080068b4 	.word	0x080068b4
 8002ac8:	200000a4 	.word	0x200000a4
 8002acc:	200000a8 	.word	0x200000a8
 8002ad0:	42470020 	.word	0x42470020
 8002ad4:	42470680 	.word	0x42470680
 8002ad8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7ff f886 	bl	8001bec <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0a3      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCC_OscConfig+0x4f0>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7ff f874 	bl	8001bec <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7ff f870 	bl	8001bec <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e08d      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	4a43      	ldr	r2, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d079      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d056      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d13b      	bne.n	8002bca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x65c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7ff f848 	bl	8001bec <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f844 	bl	8001bec <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e063      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	4319      	orrs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	430b      	orrs	r3, r1
 8002b96:	492b      	ldr	r1, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x65c>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f823 	bl	8001bec <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002baa:	f7ff f81f 	bl	8001bec <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e03e      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x5be>
 8002bc8:	e036      	b.n	8002c38 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x65c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f80c 	bl	8001bec <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f808 	bl	8001bec <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e027      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5ec>
 8002bf6:	e01f      	b.n	8002c38 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01a      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <HAL_RCC_OscConfig+0x658>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470060 	.word	0x42470060

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e11a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b8f      	ldr	r3, [pc, #572]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d919      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x34>
 8002c74:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a89      	ldr	r2, [pc, #548]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b87      	ldr	r3, [pc, #540]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 0201 	bic.w	r2, r3, #1
 8002c88:	4985      	ldr	r1, [pc, #532]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c90:	4b83      	ldr	r3, [pc, #524]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0f9      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cae:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	497a      	ldr	r1, [pc, #488]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 808e 	beq.w	8002dea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0d7      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cee:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0cb      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0bf      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0b7      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe ff58 	bl	8001bec <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe ff50 	bl	8001bec <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e09b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
 8002d6a:	e03e      	b.n	8002dea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d76:	f7fe ff39 	bl	8001bec <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e084      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x12a>
 8002d98:	e027      	b.n	8002dea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d11d      	bne.n	8002dde <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe ff22 	bl	8001bec <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e06d      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dba:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x158>
 8002dc6:	e010      	b.n	8002dea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fe ff10 	bl	8001bec <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e05b      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d219      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1be>
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	4923      	ldr	r1, [pc, #140]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_ClockConfig+0x254>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e034      	b.n	8002e96 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4917      	ldr	r1, [pc, #92]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490f      	ldr	r1, [pc, #60]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f823 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_ClockConfig+0x258>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490b      	ldr	r1, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x25c>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x260>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x264>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fe62 	bl	8001b54 <HAL_InitTick>
 8002e90:	4603      	mov	r3, r0
 8002e92:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e94:	7afb      	ldrb	r3, [r7, #11]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080068b4 	.word	0x080068b4
 8002eac:	200000a4 	.word	0x200000a4
 8002eb0:	200000a8 	.word	0x200000a8

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b08e      	sub	sp, #56	; 0x38
 8002eba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	f200 8092 	bhi.w	8002ff6 <HAL_RCC_GetSysClockFreq+0x142>
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x28>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x2e>
 8002eda:	e08c      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_RCC_GetSysClockFreq+0x170>)
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee0:	e097      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCC_GetSysClockFreq+0x174>)
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ee6:	e094      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	0c9b      	lsrs	r3, r3, #18
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCC_GetSysClockFreq+0x178>)
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	0d9b      	lsrs	r3, r3, #22
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	3301      	adds	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d021      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	2200      	movs	r2, #0
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	61fa      	str	r2, [r7, #28]
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCC_GetSysClockFreq+0x174>)
 8002f18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002f1c:	464a      	mov	r2, r9
 8002f1e:	fb03 f202 	mul.w	r2, r3, r2
 8002f22:	2300      	movs	r3, #0
 8002f24:	4644      	mov	r4, r8
 8002f26:	fb04 f303 	mul.w	r3, r4, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <HAL_RCC_GetSysClockFreq+0x174>)
 8002f2e:	4644      	mov	r4, r8
 8002f30:	fba4 0102 	umull	r0, r1, r4, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	4619      	mov	r1, r3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	617a      	str	r2, [r7, #20]
 8002f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f44:	f7fd f92c 	bl	80001a0 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f50:	e04e      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2200      	movs	r2, #0
 8002f56:	469a      	mov	sl, r3
 8002f58:	4693      	mov	fp, r2
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	465b      	mov	r3, fp
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	ebb2 080a 	subs.w	r8, r2, sl
 8002f76:	eb63 090b 	sbc.w	r9, r3, fp
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f92:	eb63 0509 	sbc.w	r5, r3, r9
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	00eb      	lsls	r3, r5, #3
 8002fa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa4:	00e2      	lsls	r2, r4, #3
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	461d      	mov	r5, r3
 8002faa:	eb14 030a 	adds.w	r3, r4, sl
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	eb45 030b 	adc.w	r3, r5, fp
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	028b      	lsls	r3, r1, #10
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4604      	mov	r4, r0
 8002fcc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe4:	f7fd f8dc 	bl	80001a0 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff4:	e00d      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0b5b      	lsrs	r3, r3, #13
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	3301      	adds	r3, #1
 8003006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003014:	4618      	mov	r0, r3
 8003016:	3738      	adds	r7, #56	; 0x38
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	016e3600 	.word	0x016e3600
 800302c:	080068a8 	.word	0x080068a8

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	200000a4 	.word	0x200000a4

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	080068c4 	.word	0x080068c4

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffde 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	080068c4 	.word	0x080068c4

08003094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d12c      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030ac:	4b26      	ldr	r3, [pc, #152]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	e016      	b.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b20      	ldr	r3, [pc, #128]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6253      	str	r3, [r2, #36]	; 0x24
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030e4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	4a17      	ldr	r2, [pc, #92]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030f8:	d105      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003100:	d101      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003102:	2301      	movs	r3, #1
 8003104:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 0201 	bic.w	r2, r3, #1
 8003120:	490b      	ldr	r1, [pc, #44]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06e      	b.n	8003244 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d009      	beq.n	800318c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
 800317e:	e005      	b.n	800318c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd ffe0 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	ea42 0103 	orr.w	r1, r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	0c1a      	lsrs	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f002 0204 	and.w	r2, r2, #4
 8003232:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_SPI_Transmit+0x22>
 800326a:	2302      	movs	r3, #2
 800326c:	e12d      	b.n	80034ca <HAL_SPI_Transmit+0x27e>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003276:	f7fe fcb9 	bl	8001bec <HAL_GetTick>
 800327a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800328c:	2302      	movs	r3, #2
 800328e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003290:	e116      	b.n	80034c0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_SPI_Transmit+0x52>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a2:	e10d      	b.n	80034c0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ea:	d10f      	bne.n	800330c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800330a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d007      	beq.n	800332a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	d14f      	bne.n	80033d4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0xf6>
 800333c:	8afb      	ldrh	r3, [r7, #22]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d142      	bne.n	80033c8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	881a      	ldrh	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	1c9a      	adds	r2, r3, #2
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003366:	e02f      	b.n	80033c8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d112      	bne.n	800339c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	86da      	strh	r2, [r3, #54]	; 0x36
 800339a:	e015      	b.n	80033c8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339c:	f7fe fc26 	bl	8001bec <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d803      	bhi.n	80033b4 <HAL_SPI_Transmit+0x168>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d102      	bne.n	80033ba <HAL_SPI_Transmit+0x16e>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033c6:	e07b      	b.n	80034c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ca      	bne.n	8003368 <HAL_SPI_Transmit+0x11c>
 80033d2:	e050      	b.n	8003476 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Transmit+0x196>
 80033dc:	8afb      	ldrh	r3, [r7, #22]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d144      	bne.n	800346c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003408:	e030      	b.n	800346c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b02      	cmp	r3, #2
 8003416:	d113      	bne.n	8003440 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	86da      	strh	r2, [r3, #54]	; 0x36
 800343e:	e015      	b.n	800346c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003440:	f7fe fbd4 	bl	8001bec <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d803      	bhi.n	8003458 <HAL_SPI_Transmit+0x20c>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d102      	bne.n	800345e <HAL_SPI_Transmit+0x212>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800346a:	e029      	b.n	80034c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1c9      	bne.n	800340a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fb66 	bl	8003b4c <SPI_EndRxTxTransaction>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e003      	b.n	80034c0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08c      	sub	sp, #48	; 0x30
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034e0:	2301      	movs	r3, #1
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x26>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e198      	b.n	800382a <HAL_SPI_TransmitReceive+0x358>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003500:	f7fe fb74 	bl	8001bec <HAL_GetTick>
 8003504:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800350c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800351a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800351e:	2b01      	cmp	r3, #1
 8003520:	d00f      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x70>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003528:	d107      	bne.n	800353a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_SPI_TransmitReceive+0x68>
 8003532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003536:	2b04      	cmp	r3, #4
 8003538:	d003      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003540:	e16d      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x82>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x82>
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800355a:	e160      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b04      	cmp	r3, #4
 8003566:	d003      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	887a      	ldrh	r2, [r7, #2]
 8003598:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d007      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035cc:	d17c      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x10a>
 80035d6:	8b7b      	ldrh	r3, [r7, #26]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d16a      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	e057      	b.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11b      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x176>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x176>
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d113      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d119      	bne.n	800368a <HAL_SPI_TransmitReceive+0x1b8>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d014      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	b292      	uxth	r2, r2
 800366c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	1c9a      	adds	r2, r3, #2
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003686:	2301      	movs	r3, #1
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368a:	f7fe faaf 	bl	8001bec <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003696:	429a      	cmp	r2, r3
 8003698:	d80b      	bhi.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d007      	beq.n	80036b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036b0:	e0b5      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1a2      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x130>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d19d      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x130>
 80036c6:	e080      	b.n	80037ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x204>
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d16f      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fc:	e05b      	b.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d11c      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x274>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x274>
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d114      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d119      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x2b6>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003784:	2301      	movs	r3, #1
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003788:	f7fe fa30 	bl	8001bec <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003794:	429a      	cmp	r2, r3
 8003796:	d803      	bhi.n	80037a0 <HAL_SPI_TransmitReceive+0x2ce>
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d102      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2d4>
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80037b4:	e033      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d19e      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x22c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d199      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f9bc 	bl	8003b4c <SPI_EndRxTxTransaction>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037e6:	e01a      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003814:	e003      	b.n	800381e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800382a:	4618      	mov	r0, r3
 800382c:	3730      	adds	r7, #48	; 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10f      	bne.n	8003878 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
    return;
 8003876:	e0be      	b.n	80039f6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_SPI_IRQHandler+0x66>
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	09db      	lsrs	r3, r3, #7
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
    return;
 8003898:	e0ad      	b.n	80039f6 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SPI_IRQHandler+0x80>
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80a1 	beq.w	80039f6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 809a 	beq.w	80039f6 <HAL_SPI_IRQHandler+0x1c2>
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d023      	beq.n	8003916 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d011      	beq.n	80038fe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	e00b      	b.n	8003916 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]
        return;
 8003914:	e06f      	b.n	80039f6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d014      	beq.n	800394c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d04f      	beq.n	80039f4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003962:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_SPI_IRQHandler+0x14c>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d034      	beq.n	80039ea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0203 	bic.w	r2, r2, #3
 800398e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d011      	beq.n	80039bc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_SPI_IRQHandler+0x1c8>)
 800399e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fa97 	bl	8001ed8 <HAL_DMA_Abort_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d016      	beq.n	80039f2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <HAL_SPI_IRQHandler+0x1c8>)
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fa81 	bl	8001ed8 <HAL_DMA_Abort_IT>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80039e8:	e003      	b.n	80039f2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f808 	bl	8003a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039f0:	e000      	b.n	80039f4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80039f2:	bf00      	nop
    return;
 80039f4:	bf00      	nop
  }
}
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	08003a13 	.word	0x08003a13

08003a00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ffe7 	bl	8003a00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a4c:	f7fe f8ce 	bl	8001bec <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a5c:	f7fe f8c6 	bl	8001bec <HAL_GetTick>
 8003a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	015b      	lsls	r3, r3, #5
 8003a68:	0d1b      	lsrs	r3, r3, #20
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a72:	e054      	b.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d050      	beq.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a7c:	f7fe f8b6 	bl	8001bec <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d902      	bls.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13d      	bne.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d111      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab4:	d004      	beq.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abe:	d107      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad8:	d10f      	bne.n	8003afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e017      	b.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d19b      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200000a4 	.word	0x200000a4

08003b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <SPI_EndRxTxTransaction+0x7c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <SPI_EndRxTxTransaction+0x80>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0d5b      	lsrs	r3, r3, #21
 8003b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b76:	d112      	bne.n	8003b9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff ff5a 	bl	8003a3c <SPI_WaitFlagStateUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e00f      	b.n	8003bbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d0f2      	beq.n	8003b9e <SPI_EndRxTxTransaction+0x52>
 8003bb8:	e000      	b.n	8003bbc <SPI_EndRxTxTransaction+0x70>
        break;
 8003bba:	bf00      	nop
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200000a4 	.word	0x200000a4
 8003bcc:	165e9f81 	.word	0x165e9f81

08003bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e042      	b.n	8003c68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd fb04 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fe57 	bl	80048c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d16d      	bne.n	8003d6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Transmit+0x2c>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e066      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2221      	movs	r2, #33	; 0x21
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cae:	f7fd ff9d 	bl	8001bec <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d108      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e003      	b.n	8003ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ce4:	e02a      	b.n	8003d3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fba6 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1cf      	bne.n	8003ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fb76 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b08a      	sub	sp, #40	; 0x28
 8003d7a:	af02      	add	r7, sp, #8
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d17c      	bne.n	8003e90 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_UART_Receive+0x2c>
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e075      	b.n	8003e92 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2222      	movs	r2, #34	; 0x22
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fd ff17 	bl	8001bec <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Receive+0x72>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003df0:	e043      	b.n	8003e7a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fb20 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e042      	b.n	8003e92 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	3302      	adds	r3, #2
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e01f      	b.n	8003e6c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d007      	beq.n	8003e46 <HAL_UART_Receive+0xd0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_UART_Receive+0xde>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e008      	b.n	8003e66 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1b6      	bne.n	8003df2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d112      	bne.n	8003eda <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_Receive_IT+0x26>
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00b      	b.n	8003edc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fb24 	bl	800451e <UART_Start_Receive_IT>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	e000      	b.n	8003edc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ba      	sub	sp, #232	; 0xe8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_UART_IRQHandler+0x66>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fc01 	bl	800474a <UART_Receive_IT>
      return;
 8003f48:	e25b      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80de 	beq.w	8004110 <HAL_UART_IRQHandler+0x22c>
 8003f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80d1 	beq.w	8004110 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_UART_IRQHandler+0xae>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
 8003f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f043 0202 	orr.w	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xf6>
 8003fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d011      	beq.n	800400a <HAL_UART_IRQHandler+0x126>
 8003fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f043 0208 	orr.w	r2, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 81f2 	beq.w	80043f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_UART_IRQHandler+0x14e>
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fb8c 	bl	800474a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_UART_IRQHandler+0x17a>
 8004056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04f      	beq.n	80040fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa96 	bl	8004590 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d141      	bne.n	80040f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800409e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1d9      	bne.n	8004072 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d013      	beq.n	80040ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	4a7e      	ldr	r2, [pc, #504]	; (80042c4 <HAL_UART_IRQHandler+0x3e0>)
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd ff00 	bl	8001ed8 <HAL_DMA_Abort_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040e8:	4610      	mov	r0, r2
 80040ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e00e      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f993 	bl	800441a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e00a      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f98f 	bl	800441a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e006      	b.n	800410c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f98b 	bl	800441a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800410a:	e175      	b.n	80043f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	bf00      	nop
    return;
 800410e:	e173      	b.n	80043f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 814f 	bne.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8148 	beq.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8141 	beq.w	80043b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	f040 80b6 	bne.w	80042c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8145 	beq.w	80043fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417a:	429a      	cmp	r2, r3
 800417c:	f080 813e 	bcs.w	80043fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004186:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b20      	cmp	r3, #32
 8004190:	f000 8088 	beq.w	80042a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1d9      	bne.n	8004194 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004204:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004208:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800420c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e1      	bne.n	80041e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800422c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3314      	adds	r3, #20
 800423c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004240:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004242:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004246:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800424e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004274:	f023 0310 	bic.w	r3, r3, #16
 8004278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004286:	65ba      	str	r2, [r7, #88]	; 0x58
 8004288:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800428c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fddd 	bl	8001e5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8b6 	bl	800442c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042c0:	e09c      	b.n	80043fc <HAL_UART_IRQHandler+0x518>
 80042c2:	bf00      	nop
 80042c4:	08004655 	.word	0x08004655
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 808e 	beq.w	8004400 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8089 	beq.w	8004400 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004312:	647a      	str	r2, [r7, #68]	; 0x44
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e3      	bne.n	80042ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	623b      	str	r3, [r7, #32]
   return(result);
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800434a:	633a      	str	r2, [r7, #48]	; 0x30
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	60fb      	str	r3, [r7, #12]
   return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004390:	61fa      	str	r2, [r7, #28]
 8004392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	617b      	str	r3, [r7, #20]
   return(result);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f83b 	bl	800442c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b6:	e023      	b.n	8004400 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <HAL_UART_IRQHandler+0x4f4>
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f953 	bl	800467c <UART_Transmit_IT>
    return;
 80043d6:	e014      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <HAL_UART_IRQHandler+0x51e>
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f992 	bl	800471a <UART_EndTransmit_IT>
    return;
 80043f6:	e004      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
    return;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
      return;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_UART_IRQHandler+0x51e>
      return;
 8004400:	bf00      	nop
  }
}
 8004402:	37e8      	adds	r7, #232	; 0xe8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b090      	sub	sp, #64	; 0x40
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e050      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d04c      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 8004462:	f7fd fbc3 	bl	8001bec <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446e:	429a      	cmp	r2, r3
 8004470:	d241      	bcs.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004492:	637a      	str	r2, [r7, #52]	; 0x34
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e5      	bne.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c6:	623a      	str	r2, [r7, #32]
 80044c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d09f      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3740      	adds	r7, #64	; 0x40
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	4613      	mov	r3, r2
 800452a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2222      	movs	r2, #34	; 0x22
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004562:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0220 	orr.w	r2, r2, #32
 8004582:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b095      	sub	sp, #84	; 0x54
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b8:	643a      	str	r2, [r7, #64]	; 0x40
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3314      	adds	r3, #20
 80045d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	61fb      	str	r3, [r7, #28]
   return(result);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b01      	cmp	r3, #1
 8004606:	d119      	bne.n	800463c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	60bb      	str	r3, [r7, #8]
   return(result);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004628:	61ba      	str	r2, [r7, #24]
 800462a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	613b      	str	r3, [r7, #16]
   return(result);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
}
 800464a:	bf00      	nop
 800464c:	3754      	adds	r7, #84	; 0x54
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fed3 	bl	800441a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b21      	cmp	r3, #33	; 0x21
 800468e:	d13e      	bne.n	800470e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004698:	d114      	bne.n	80046c4 <UART_Transmit_IT+0x48>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d110      	bne.n	80046c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]
 80046c2:	e008      	b.n	80046d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6211      	str	r1, [r2, #32]
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4619      	mov	r1, r3
 80046e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004708:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fe64 	bl	8004408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08c      	sub	sp, #48	; 0x30
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b22      	cmp	r3, #34	; 0x22
 800475c:	f040 80ae 	bne.w	80048bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d117      	bne.n	800479a <UART_Receive_IT+0x50>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	b29a      	uxth	r2, r3
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
 8004798:	e026      	b.n	80047e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d007      	beq.n	80047be <UART_Receive_IT+0x74>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <UART_Receive_IT+0x82>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e008      	b.n	80047de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4619      	mov	r1, r3
 80047f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d15d      	bne.n	80048b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0220 	bic.w	r2, r2, #32
 800480a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0201 	bic.w	r2, r2, #1
 800482a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	2b01      	cmp	r3, #1
 8004840:	d135      	bne.n	80048ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	613b      	str	r3, [r7, #16]
   return(result);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 0310 	bic.w	r3, r3, #16
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004868:	623a      	str	r2, [r7, #32]
 800486a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	6a3a      	ldr	r2, [r7, #32]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	61bb      	str	r3, [r7, #24]
   return(result);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d10a      	bne.n	80048a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fdc0 	bl	800442c <HAL_UARTEx_RxEventCallback>
 80048ac:	e002      	b.n	80048b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fb fe6c 	bl	800058c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e002      	b.n	80048be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3730      	adds	r7, #48	; 0x30
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004908:	f023 030c 	bic.w	r3, r3, #12
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a55      	ldr	r2, [pc, #340]	; (8004a88 <UART_SetConfig+0x1c0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d103      	bne.n	800493e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004936:	f7fe fb99 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	e002      	b.n	8004944 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7fe fb81 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8004942:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d14c      	bne.n	80049e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009a      	lsls	r2, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	4a49      	ldr	r2, [pc, #292]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	0119      	lsls	r1, r3, #4
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009a      	lsls	r2, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	fbb2 f2f3 	udiv	r2, r2, r3
 8004984:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004986:	fba3 0302 	umull	r0, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2064      	movs	r0, #100	; 0x64
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	3332      	adds	r3, #50	; 0x32
 8004998:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <UART_SetConfig+0x1c4>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a6:	4419      	add	r1, r3
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80049be:	4b33      	ldr	r3, [pc, #204]	; (8004a8c <UART_SetConfig+0x1c4>)
 80049c0:	fba3 0302 	umull	r0, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2064      	movs	r0, #100	; 0x64
 80049c8:	fb00 f303 	mul.w	r3, r0, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <UART_SetConfig+0x1c4>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 0207 	and.w	r2, r3, #7
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	440a      	add	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e6:	e04a      	b.n	8004a7e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	0119      	lsls	r1, r3, #4
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009a      	lsls	r2, r3, #2
 8004a12:	441a      	add	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004a20:	fba3 0302 	umull	r0, r3, r3, r2
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	2064      	movs	r0, #100	; 0x64
 8004a28:	fb00 f303 	mul.w	r3, r0, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	3332      	adds	r3, #50	; 0x32
 8004a32:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a3e:	4419      	add	r1, r3
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004a58:	fba3 0302 	umull	r0, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2064      	movs	r0, #100	; 0x64
 8004a60:	fb00 f303 	mul.w	r3, r0, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <UART_SetConfig+0x1c4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40013800 	.word	0x40013800
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <__errno>:
 8004a90:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <__errno+0x8>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	200000b0 	.word	0x200000b0

08004a9c <__libc_init_array>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	4d0c      	ldr	r5, [pc, #48]	; (8004ad4 <__libc_init_array+0x38>)
 8004aa2:	4c0d      	ldr	r4, [pc, #52]	; (8004ad8 <__libc_init_array+0x3c>)
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	42a6      	cmp	r6, r4
 8004aaa:	d109      	bne.n	8004ac0 <__libc_init_array+0x24>
 8004aac:	f001 fa18 	bl	8005ee0 <_init>
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	4d0a      	ldr	r5, [pc, #40]	; (8004adc <__libc_init_array+0x40>)
 8004ab4:	4c0a      	ldr	r4, [pc, #40]	; (8004ae0 <__libc_init_array+0x44>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	42a6      	cmp	r6, r4
 8004abc:	d105      	bne.n	8004aca <__libc_init_array+0x2e>
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac4:	4798      	blx	r3
 8004ac6:	3601      	adds	r6, #1
 8004ac8:	e7ee      	b.n	8004aa8 <__libc_init_array+0xc>
 8004aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ace:	4798      	blx	r3
 8004ad0:	3601      	adds	r6, #1
 8004ad2:	e7f2      	b.n	8004aba <__libc_init_array+0x1e>
 8004ad4:	0800696c 	.word	0x0800696c
 8004ad8:	0800696c 	.word	0x0800696c
 8004adc:	0800696c 	.word	0x0800696c
 8004ae0:	08006970 	.word	0x08006970

08004ae4 <memcmp>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	3901      	subs	r1, #1
 8004ae8:	4402      	add	r2, r0
 8004aea:	4290      	cmp	r0, r2
 8004aec:	d101      	bne.n	8004af2 <memcmp+0xe>
 8004aee:	2000      	movs	r0, #0
 8004af0:	e005      	b.n	8004afe <memcmp+0x1a>
 8004af2:	7803      	ldrb	r3, [r0, #0]
 8004af4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d001      	beq.n	8004b00 <memcmp+0x1c>
 8004afc:	1b18      	subs	r0, r3, r4
 8004afe:	bd10      	pop	{r4, pc}
 8004b00:	3001      	adds	r0, #1
 8004b02:	e7f2      	b.n	8004aea <memcmp+0x6>

08004b04 <memset>:
 8004b04:	4603      	mov	r3, r0
 8004b06:	4402      	add	r2, r0
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d100      	bne.n	8004b0e <memset+0xa>
 8004b0c:	4770      	bx	lr
 8004b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b12:	e7f9      	b.n	8004b08 <memset+0x4>

08004b14 <iprintf>:
 8004b14:	b40f      	push	{r0, r1, r2, r3}
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <iprintf+0x2c>)
 8004b18:	b513      	push	{r0, r1, r4, lr}
 8004b1a:	681c      	ldr	r4, [r3, #0]
 8004b1c:	b124      	cbz	r4, 8004b28 <iprintf+0x14>
 8004b1e:	69a3      	ldr	r3, [r4, #24]
 8004b20:	b913      	cbnz	r3, 8004b28 <iprintf+0x14>
 8004b22:	4620      	mov	r0, r4
 8004b24:	f000 fa7a 	bl	800501c <__sinit>
 8004b28:	ab05      	add	r3, sp, #20
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	9a04      	ldr	r2, [sp, #16]
 8004b2e:	68a1      	ldr	r1, [r4, #8]
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	f000 fdd9 	bl	80056e8 <_vfiprintf_r>
 8004b36:	b002      	add	sp, #8
 8004b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3c:	b004      	add	sp, #16
 8004b3e:	4770      	bx	lr
 8004b40:	200000b0 	.word	0x200000b0

08004b44 <_puts_r>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	460e      	mov	r6, r1
 8004b48:	4605      	mov	r5, r0
 8004b4a:	b118      	cbz	r0, 8004b54 <_puts_r+0x10>
 8004b4c:	6983      	ldr	r3, [r0, #24]
 8004b4e:	b90b      	cbnz	r3, 8004b54 <_puts_r+0x10>
 8004b50:	f000 fa64 	bl	800501c <__sinit>
 8004b54:	69ab      	ldr	r3, [r5, #24]
 8004b56:	68ac      	ldr	r4, [r5, #8]
 8004b58:	b913      	cbnz	r3, 8004b60 <_puts_r+0x1c>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f000 fa5e 	bl	800501c <__sinit>
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <_puts_r+0xd0>)
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d120      	bne.n	8004ba8 <_puts_r+0x64>
 8004b66:	686c      	ldr	r4, [r5, #4]
 8004b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b6a:	07db      	lsls	r3, r3, #31
 8004b6c:	d405      	bmi.n	8004b7a <_puts_r+0x36>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	0598      	lsls	r0, r3, #22
 8004b72:	d402      	bmi.n	8004b7a <_puts_r+0x36>
 8004b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b76:	f000 faef 	bl	8005158 <__retarget_lock_acquire_recursive>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	0719      	lsls	r1, r3, #28
 8004b7e:	d51d      	bpl.n	8004bbc <_puts_r+0x78>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b1db      	cbz	r3, 8004bbc <_puts_r+0x78>
 8004b84:	3e01      	subs	r6, #1
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	bb39      	cbnz	r1, 8004be2 <_puts_r+0x9e>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da38      	bge.n	8004c08 <_puts_r+0xc4>
 8004b96:	4622      	mov	r2, r4
 8004b98:	210a      	movs	r1, #10
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 f868 	bl	8004c70 <__swbuf_r>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d011      	beq.n	8004bc8 <_puts_r+0x84>
 8004ba4:	250a      	movs	r5, #10
 8004ba6:	e011      	b.n	8004bcc <_puts_r+0x88>
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <_puts_r+0xd4>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d101      	bne.n	8004bb2 <_puts_r+0x6e>
 8004bae:	68ac      	ldr	r4, [r5, #8]
 8004bb0:	e7da      	b.n	8004b68 <_puts_r+0x24>
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <_puts_r+0xd8>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	bf08      	it	eq
 8004bb8:	68ec      	ldreq	r4, [r5, #12]
 8004bba:	e7d5      	b.n	8004b68 <_puts_r+0x24>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 f8a8 	bl	8004d14 <__swsetup_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0dd      	beq.n	8004b84 <_puts_r+0x40>
 8004bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8004bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bce:	07da      	lsls	r2, r3, #31
 8004bd0:	d405      	bmi.n	8004bde <_puts_r+0x9a>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	059b      	lsls	r3, r3, #22
 8004bd6:	d402      	bmi.n	8004bde <_puts_r+0x9a>
 8004bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bda:	f000 fabe 	bl	800515a <__retarget_lock_release_recursive>
 8004bde:	4628      	mov	r0, r5
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da04      	bge.n	8004bf0 <_puts_r+0xac>
 8004be6:	69a2      	ldr	r2, [r4, #24]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	dc06      	bgt.n	8004bfa <_puts_r+0xb6>
 8004bec:	290a      	cmp	r1, #10
 8004bee:	d004      	beq.n	8004bfa <_puts_r+0xb6>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	6022      	str	r2, [r4, #0]
 8004bf6:	7019      	strb	r1, [r3, #0]
 8004bf8:	e7c5      	b.n	8004b86 <_puts_r+0x42>
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 f837 	bl	8004c70 <__swbuf_r>
 8004c02:	3001      	adds	r0, #1
 8004c04:	d1bf      	bne.n	8004b86 <_puts_r+0x42>
 8004c06:	e7df      	b.n	8004bc8 <_puts_r+0x84>
 8004c08:	250a      	movs	r5, #10
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	6022      	str	r2, [r4, #0]
 8004c10:	701d      	strb	r5, [r3, #0]
 8004c12:	e7db      	b.n	8004bcc <_puts_r+0x88>
 8004c14:	080068f0 	.word	0x080068f0
 8004c18:	08006910 	.word	0x08006910
 8004c1c:	080068d0 	.word	0x080068d0

08004c20 <puts>:
 8004c20:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <puts+0xc>)
 8004c22:	4601      	mov	r1, r0
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f7ff bf8d 	b.w	8004b44 <_puts_r>
 8004c2a:	bf00      	nop
 8004c2c:	200000b0 	.word	0x200000b0

08004c30 <siprintf>:
 8004c30:	b40e      	push	{r1, r2, r3}
 8004c32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c36:	b500      	push	{lr}
 8004c38:	b09c      	sub	sp, #112	; 0x70
 8004c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c3c:	9002      	str	r0, [sp, #8]
 8004c3e:	9006      	str	r0, [sp, #24]
 8004c40:	9107      	str	r1, [sp, #28]
 8004c42:	9104      	str	r1, [sp, #16]
 8004c44:	4808      	ldr	r0, [pc, #32]	; (8004c68 <siprintf+0x38>)
 8004c46:	4909      	ldr	r1, [pc, #36]	; (8004c6c <siprintf+0x3c>)
 8004c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	a902      	add	r1, sp, #8
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	f000 fc20 	bl	8005498 <_svfiprintf_r>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	9b02      	ldr	r3, [sp, #8]
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	b01c      	add	sp, #112	; 0x70
 8004c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c64:	b003      	add	sp, #12
 8004c66:	4770      	bx	lr
 8004c68:	200000b0 	.word	0x200000b0
 8004c6c:	ffff0208 	.word	0xffff0208

08004c70 <__swbuf_r>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	460e      	mov	r6, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	4605      	mov	r5, r0
 8004c78:	b118      	cbz	r0, 8004c82 <__swbuf_r+0x12>
 8004c7a:	6983      	ldr	r3, [r0, #24]
 8004c7c:	b90b      	cbnz	r3, 8004c82 <__swbuf_r+0x12>
 8004c7e:	f000 f9cd 	bl	800501c <__sinit>
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <__swbuf_r+0x98>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d12b      	bne.n	8004ce0 <__swbuf_r+0x70>
 8004c88:	686c      	ldr	r4, [r5, #4]
 8004c8a:	69a3      	ldr	r3, [r4, #24]
 8004c8c:	60a3      	str	r3, [r4, #8]
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	071a      	lsls	r2, r3, #28
 8004c92:	d52f      	bpl.n	8004cf4 <__swbuf_r+0x84>
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	b36b      	cbz	r3, 8004cf4 <__swbuf_r+0x84>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	b2f6      	uxtb	r6, r6
 8004c9e:	1ac0      	subs	r0, r0, r3
 8004ca0:	6963      	ldr	r3, [r4, #20]
 8004ca2:	4637      	mov	r7, r6
 8004ca4:	4283      	cmp	r3, r0
 8004ca6:	dc04      	bgt.n	8004cb2 <__swbuf_r+0x42>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f922 	bl	8004ef4 <_fflush_r>
 8004cb0:	bb30      	cbnz	r0, 8004d00 <__swbuf_r+0x90>
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	6022      	str	r2, [r4, #0]
 8004cc0:	701e      	strb	r6, [r3, #0]
 8004cc2:	6963      	ldr	r3, [r4, #20]
 8004cc4:	4283      	cmp	r3, r0
 8004cc6:	d004      	beq.n	8004cd2 <__swbuf_r+0x62>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d506      	bpl.n	8004cdc <__swbuf_r+0x6c>
 8004cce:	2e0a      	cmp	r6, #10
 8004cd0:	d104      	bne.n	8004cdc <__swbuf_r+0x6c>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 f90d 	bl	8004ef4 <_fflush_r>
 8004cda:	b988      	cbnz	r0, 8004d00 <__swbuf_r+0x90>
 8004cdc:	4638      	mov	r0, r7
 8004cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <__swbuf_r+0x9c>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d101      	bne.n	8004cea <__swbuf_r+0x7a>
 8004ce6:	68ac      	ldr	r4, [r5, #8]
 8004ce8:	e7cf      	b.n	8004c8a <__swbuf_r+0x1a>
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <__swbuf_r+0xa0>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	bf08      	it	eq
 8004cf0:	68ec      	ldreq	r4, [r5, #12]
 8004cf2:	e7ca      	b.n	8004c8a <__swbuf_r+0x1a>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 f80c 	bl	8004d14 <__swsetup_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d0cb      	beq.n	8004c98 <__swbuf_r+0x28>
 8004d00:	f04f 37ff 	mov.w	r7, #4294967295
 8004d04:	e7ea      	b.n	8004cdc <__swbuf_r+0x6c>
 8004d06:	bf00      	nop
 8004d08:	080068f0 	.word	0x080068f0
 8004d0c:	08006910 	.word	0x08006910
 8004d10:	080068d0 	.word	0x080068d0

08004d14 <__swsetup_r>:
 8004d14:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <__swsetup_r+0xcc>)
 8004d16:	b570      	push	{r4, r5, r6, lr}
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b125      	cbz	r5, 8004d2a <__swsetup_r+0x16>
 8004d20:	69ab      	ldr	r3, [r5, #24]
 8004d22:	b913      	cbnz	r3, 8004d2a <__swsetup_r+0x16>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f979 	bl	800501c <__sinit>
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <__swsetup_r+0xd0>)
 8004d2c:	429c      	cmp	r4, r3
 8004d2e:	d10f      	bne.n	8004d50 <__swsetup_r+0x3c>
 8004d30:	686c      	ldr	r4, [r5, #4]
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d38:	0719      	lsls	r1, r3, #28
 8004d3a:	d42c      	bmi.n	8004d96 <__swsetup_r+0x82>
 8004d3c:	06dd      	lsls	r5, r3, #27
 8004d3e:	d411      	bmi.n	8004d64 <__swsetup_r+0x50>
 8004d40:	2309      	movs	r3, #9
 8004d42:	6033      	str	r3, [r6, #0]
 8004d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	e03e      	b.n	8004dce <__swsetup_r+0xba>
 8004d50:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <__swsetup_r+0xd4>)
 8004d52:	429c      	cmp	r4, r3
 8004d54:	d101      	bne.n	8004d5a <__swsetup_r+0x46>
 8004d56:	68ac      	ldr	r4, [r5, #8]
 8004d58:	e7eb      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <__swsetup_r+0xd8>)
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	bf08      	it	eq
 8004d60:	68ec      	ldreq	r4, [r5, #12]
 8004d62:	e7e6      	b.n	8004d32 <__swsetup_r+0x1e>
 8004d64:	0758      	lsls	r0, r3, #29
 8004d66:	d512      	bpl.n	8004d8e <__swsetup_r+0x7a>
 8004d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6a:	b141      	cbz	r1, 8004d7e <__swsetup_r+0x6a>
 8004d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d70:	4299      	cmp	r1, r3
 8004d72:	d002      	beq.n	8004d7a <__swsetup_r+0x66>
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 fa57 	bl	8005228 <_free_r>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	2300      	movs	r3, #0
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b94b      	cbnz	r3, 8004dae <__swsetup_r+0x9a>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da4:	d003      	beq.n	8004dae <__swsetup_r+0x9a>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f9fd 	bl	80051a8 <__smakebuf_r>
 8004dae:	89a0      	ldrh	r0, [r4, #12]
 8004db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004db4:	f010 0301 	ands.w	r3, r0, #1
 8004db8:	d00a      	beq.n	8004dd0 <__swsetup_r+0xbc>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60a3      	str	r3, [r4, #8]
 8004dbe:	6963      	ldr	r3, [r4, #20]
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	61a3      	str	r3, [r4, #24]
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	b943      	cbnz	r3, 8004dda <__swsetup_r+0xc6>
 8004dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dcc:	d1ba      	bne.n	8004d44 <__swsetup_r+0x30>
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	0781      	lsls	r1, r0, #30
 8004dd2:	bf58      	it	pl
 8004dd4:	6963      	ldrpl	r3, [r4, #20]
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	e7f4      	b.n	8004dc4 <__swsetup_r+0xb0>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7f7      	b.n	8004dce <__swsetup_r+0xba>
 8004dde:	bf00      	nop
 8004de0:	200000b0 	.word	0x200000b0
 8004de4:	080068f0 	.word	0x080068f0
 8004de8:	08006910 	.word	0x08006910
 8004dec:	080068d0 	.word	0x080068d0

08004df0 <__sflush_r>:
 8004df0:	898a      	ldrh	r2, [r1, #12]
 8004df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df4:	4605      	mov	r5, r0
 8004df6:	0710      	lsls	r0, r2, #28
 8004df8:	460c      	mov	r4, r1
 8004dfa:	d457      	bmi.n	8004eac <__sflush_r+0xbc>
 8004dfc:	684b      	ldr	r3, [r1, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dc04      	bgt.n	8004e0c <__sflush_r+0x1c>
 8004e02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dc01      	bgt.n	8004e0c <__sflush_r+0x1c>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d0fa      	beq.n	8004e08 <__sflush_r+0x18>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e18:	682f      	ldr	r7, [r5, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	d032      	beq.n	8004e84 <__sflush_r+0x94>
 8004e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	075a      	lsls	r2, r3, #29
 8004e24:	d505      	bpl.n	8004e32 <__sflush_r+0x42>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2c:	b10b      	cbz	r3, 8004e32 <__sflush_r+0x42>
 8004e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	4602      	mov	r2, r0
 8004e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e38:	4628      	mov	r0, r5
 8004e3a:	6a21      	ldr	r1, [r4, #32]
 8004e3c:	47b0      	blx	r6
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	d106      	bne.n	8004e52 <__sflush_r+0x62>
 8004e44:	6829      	ldr	r1, [r5, #0]
 8004e46:	291d      	cmp	r1, #29
 8004e48:	d82c      	bhi.n	8004ea4 <__sflush_r+0xb4>
 8004e4a:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <__sflush_r+0x100>)
 8004e4c:	40ca      	lsrs	r2, r1
 8004e4e:	07d6      	lsls	r6, r2, #31
 8004e50:	d528      	bpl.n	8004ea4 <__sflush_r+0xb4>
 8004e52:	2200      	movs	r2, #0
 8004e54:	6062      	str	r2, [r4, #4]
 8004e56:	6922      	ldr	r2, [r4, #16]
 8004e58:	04d9      	lsls	r1, r3, #19
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	d504      	bpl.n	8004e68 <__sflush_r+0x78>
 8004e5e:	1c42      	adds	r2, r0, #1
 8004e60:	d101      	bne.n	8004e66 <__sflush_r+0x76>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	b903      	cbnz	r3, 8004e68 <__sflush_r+0x78>
 8004e66:	6560      	str	r0, [r4, #84]	; 0x54
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	602f      	str	r7, [r5, #0]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d0cb      	beq.n	8004e08 <__sflush_r+0x18>
 8004e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <__sflush_r+0x8e>
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f9d5 	bl	8005228 <_free_r>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	6360      	str	r0, [r4, #52]	; 0x34
 8004e82:	e7c2      	b.n	8004e0a <__sflush_r+0x1a>
 8004e84:	6a21      	ldr	r1, [r4, #32]
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	1c41      	adds	r1, r0, #1
 8004e8e:	d1c7      	bne.n	8004e20 <__sflush_r+0x30>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c4      	beq.n	8004e20 <__sflush_r+0x30>
 8004e96:	2b1d      	cmp	r3, #29
 8004e98:	d001      	beq.n	8004e9e <__sflush_r+0xae>
 8004e9a:	2b16      	cmp	r3, #22
 8004e9c:	d101      	bne.n	8004ea2 <__sflush_r+0xb2>
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	e7b2      	b.n	8004e08 <__sflush_r+0x18>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	e7ae      	b.n	8004e0a <__sflush_r+0x1a>
 8004eac:	690f      	ldr	r7, [r1, #16]
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	d0aa      	beq.n	8004e08 <__sflush_r+0x18>
 8004eb2:	0793      	lsls	r3, r2, #30
 8004eb4:	bf18      	it	ne
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	bf08      	it	eq
 8004ebc:	694b      	ldreq	r3, [r1, #20]
 8004ebe:	1bf6      	subs	r6, r6, r7
 8004ec0:	600f      	str	r7, [r1, #0]
 8004ec2:	608b      	str	r3, [r1, #8]
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	dd9f      	ble.n	8004e08 <__sflush_r+0x18>
 8004ec8:	4633      	mov	r3, r6
 8004eca:	463a      	mov	r2, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	6a21      	ldr	r1, [r4, #32]
 8004ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ed4:	47e0      	blx	ip
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	dc06      	bgt.n	8004ee8 <__sflush_r+0xf8>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	e790      	b.n	8004e0a <__sflush_r+0x1a>
 8004ee8:	4407      	add	r7, r0
 8004eea:	1a36      	subs	r6, r6, r0
 8004eec:	e7ea      	b.n	8004ec4 <__sflush_r+0xd4>
 8004eee:	bf00      	nop
 8004ef0:	20400001 	.word	0x20400001

08004ef4 <_fflush_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b913      	cbnz	r3, 8004f04 <_fflush_r+0x10>
 8004efe:	2500      	movs	r5, #0
 8004f00:	4628      	mov	r0, r5
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	b118      	cbz	r0, 8004f0e <_fflush_r+0x1a>
 8004f06:	6983      	ldr	r3, [r0, #24]
 8004f08:	b90b      	cbnz	r3, 8004f0e <_fflush_r+0x1a>
 8004f0a:	f000 f887 	bl	800501c <__sinit>
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <_fflush_r+0x6c>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d11b      	bne.n	8004f4c <_fflush_r+0x58>
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ef      	beq.n	8004efe <_fflush_r+0xa>
 8004f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f20:	07d0      	lsls	r0, r2, #31
 8004f22:	d404      	bmi.n	8004f2e <_fflush_r+0x3a>
 8004f24:	0599      	lsls	r1, r3, #22
 8004f26:	d402      	bmi.n	8004f2e <_fflush_r+0x3a>
 8004f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2a:	f000 f915 	bl	8005158 <__retarget_lock_acquire_recursive>
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4621      	mov	r1, r4
 8004f32:	f7ff ff5d 	bl	8004df0 <__sflush_r>
 8004f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f38:	4605      	mov	r5, r0
 8004f3a:	07da      	lsls	r2, r3, #31
 8004f3c:	d4e0      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	d4dd      	bmi.n	8004f00 <_fflush_r+0xc>
 8004f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f46:	f000 f908 	bl	800515a <__retarget_lock_release_recursive>
 8004f4a:	e7d9      	b.n	8004f00 <_fflush_r+0xc>
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <_fflush_r+0x70>)
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d101      	bne.n	8004f56 <_fflush_r+0x62>
 8004f52:	68ac      	ldr	r4, [r5, #8]
 8004f54:	e7df      	b.n	8004f16 <_fflush_r+0x22>
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <_fflush_r+0x74>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	bf08      	it	eq
 8004f5c:	68ec      	ldreq	r4, [r5, #12]
 8004f5e:	e7da      	b.n	8004f16 <_fflush_r+0x22>
 8004f60:	080068f0 	.word	0x080068f0
 8004f64:	08006910 	.word	0x08006910
 8004f68:	080068d0 	.word	0x080068d0

08004f6c <std>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b510      	push	{r4, lr}
 8004f70:	4604      	mov	r4, r0
 8004f72:	e9c0 3300 	strd	r3, r3, [r0]
 8004f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7a:	6083      	str	r3, [r0, #8]
 8004f7c:	8181      	strh	r1, [r0, #12]
 8004f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f80:	81c2      	strh	r2, [r0, #14]
 8004f82:	6183      	str	r3, [r0, #24]
 8004f84:	4619      	mov	r1, r3
 8004f86:	2208      	movs	r2, #8
 8004f88:	305c      	adds	r0, #92	; 0x5c
 8004f8a:	f7ff fdbb 	bl	8004b04 <memset>
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <std+0x38>)
 8004f90:	6224      	str	r4, [r4, #32]
 8004f92:	6263      	str	r3, [r4, #36]	; 0x24
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <std+0x3c>)
 8004f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <std+0x40>)
 8004f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <std+0x44>)
 8004f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8004fa0:	bd10      	pop	{r4, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08005c95 	.word	0x08005c95
 8004fa8:	08005cb7 	.word	0x08005cb7
 8004fac:	08005cef 	.word	0x08005cef
 8004fb0:	08005d13 	.word	0x08005d13

08004fb4 <_cleanup_r>:
 8004fb4:	4901      	ldr	r1, [pc, #4]	; (8004fbc <_cleanup_r+0x8>)
 8004fb6:	f000 b8af 	b.w	8005118 <_fwalk_reent>
 8004fba:	bf00      	nop
 8004fbc:	08004ef5 	.word	0x08004ef5

08004fc0 <__sfmoreglue>:
 8004fc0:	2268      	movs	r2, #104	; 0x68
 8004fc2:	b570      	push	{r4, r5, r6, lr}
 8004fc4:	1e4d      	subs	r5, r1, #1
 8004fc6:	4355      	muls	r5, r2
 8004fc8:	460e      	mov	r6, r1
 8004fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fce:	f000 f993 	bl	80052f8 <_malloc_r>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	b140      	cbz	r0, 8004fe8 <__sfmoreglue+0x28>
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8004fdc:	300c      	adds	r0, #12
 8004fde:	60a0      	str	r0, [r4, #8]
 8004fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fe4:	f7ff fd8e 	bl	8004b04 <memset>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	bd70      	pop	{r4, r5, r6, pc}

08004fec <__sfp_lock_acquire>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__sfp_lock_acquire+0x8>)
 8004fee:	f000 b8b3 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	200002b5 	.word	0x200002b5

08004ff8 <__sfp_lock_release>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__sfp_lock_release+0x8>)
 8004ffa:	f000 b8ae 	b.w	800515a <__retarget_lock_release_recursive>
 8004ffe:	bf00      	nop
 8005000:	200002b5 	.word	0x200002b5

08005004 <__sinit_lock_acquire>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__sinit_lock_acquire+0x8>)
 8005006:	f000 b8a7 	b.w	8005158 <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	200002b6 	.word	0x200002b6

08005010 <__sinit_lock_release>:
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <__sinit_lock_release+0x8>)
 8005012:	f000 b8a2 	b.w	800515a <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	200002b6 	.word	0x200002b6

0800501c <__sinit>:
 800501c:	b510      	push	{r4, lr}
 800501e:	4604      	mov	r4, r0
 8005020:	f7ff fff0 	bl	8005004 <__sinit_lock_acquire>
 8005024:	69a3      	ldr	r3, [r4, #24]
 8005026:	b11b      	cbz	r3, 8005030 <__sinit+0x14>
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	f7ff bff0 	b.w	8005010 <__sinit_lock_release>
 8005030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005034:	6523      	str	r3, [r4, #80]	; 0x50
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <__sinit+0x68>)
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <__sinit+0x6c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	62a2      	str	r2, [r4, #40]	; 0x28
 800503e:	42a3      	cmp	r3, r4
 8005040:	bf08      	it	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	4620      	mov	r0, r4
 8005046:	bf08      	it	eq
 8005048:	61a3      	streq	r3, [r4, #24]
 800504a:	f000 f81f 	bl	800508c <__sfp>
 800504e:	6060      	str	r0, [r4, #4]
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f81b 	bl	800508c <__sfp>
 8005056:	60a0      	str	r0, [r4, #8]
 8005058:	4620      	mov	r0, r4
 800505a:	f000 f817 	bl	800508c <__sfp>
 800505e:	2200      	movs	r2, #0
 8005060:	2104      	movs	r1, #4
 8005062:	60e0      	str	r0, [r4, #12]
 8005064:	6860      	ldr	r0, [r4, #4]
 8005066:	f7ff ff81 	bl	8004f6c <std>
 800506a:	2201      	movs	r2, #1
 800506c:	2109      	movs	r1, #9
 800506e:	68a0      	ldr	r0, [r4, #8]
 8005070:	f7ff ff7c 	bl	8004f6c <std>
 8005074:	2202      	movs	r2, #2
 8005076:	2112      	movs	r1, #18
 8005078:	68e0      	ldr	r0, [r4, #12]
 800507a:	f7ff ff77 	bl	8004f6c <std>
 800507e:	2301      	movs	r3, #1
 8005080:	61a3      	str	r3, [r4, #24]
 8005082:	e7d1      	b.n	8005028 <__sinit+0xc>
 8005084:	080068cc 	.word	0x080068cc
 8005088:	08004fb5 	.word	0x08004fb5

0800508c <__sfp>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	4607      	mov	r7, r0
 8005090:	f7ff ffac 	bl	8004fec <__sfp_lock_acquire>
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <__sfp+0x84>)
 8005096:	681e      	ldr	r6, [r3, #0]
 8005098:	69b3      	ldr	r3, [r6, #24]
 800509a:	b913      	cbnz	r3, 80050a2 <__sfp+0x16>
 800509c:	4630      	mov	r0, r6
 800509e:	f7ff ffbd 	bl	800501c <__sinit>
 80050a2:	3648      	adds	r6, #72	; 0x48
 80050a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	d503      	bpl.n	80050b4 <__sfp+0x28>
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	b30b      	cbz	r3, 80050f4 <__sfp+0x68>
 80050b0:	6836      	ldr	r6, [r6, #0]
 80050b2:	e7f7      	b.n	80050a4 <__sfp+0x18>
 80050b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050b8:	b9d5      	cbnz	r5, 80050f0 <__sfp+0x64>
 80050ba:	4b16      	ldr	r3, [pc, #88]	; (8005114 <__sfp+0x88>)
 80050bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050c0:	60e3      	str	r3, [r4, #12]
 80050c2:	6665      	str	r5, [r4, #100]	; 0x64
 80050c4:	f000 f847 	bl	8005156 <__retarget_lock_init_recursive>
 80050c8:	f7ff ff96 	bl	8004ff8 <__sfp_lock_release>
 80050cc:	2208      	movs	r2, #8
 80050ce:	4629      	mov	r1, r5
 80050d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050d8:	6025      	str	r5, [r4, #0]
 80050da:	61a5      	str	r5, [r4, #24]
 80050dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050e0:	f7ff fd10 	bl	8004b04 <memset>
 80050e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050ec:	4620      	mov	r0, r4
 80050ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f0:	3468      	adds	r4, #104	; 0x68
 80050f2:	e7d9      	b.n	80050a8 <__sfp+0x1c>
 80050f4:	2104      	movs	r1, #4
 80050f6:	4638      	mov	r0, r7
 80050f8:	f7ff ff62 	bl	8004fc0 <__sfmoreglue>
 80050fc:	4604      	mov	r4, r0
 80050fe:	6030      	str	r0, [r6, #0]
 8005100:	2800      	cmp	r0, #0
 8005102:	d1d5      	bne.n	80050b0 <__sfp+0x24>
 8005104:	f7ff ff78 	bl	8004ff8 <__sfp_lock_release>
 8005108:	230c      	movs	r3, #12
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	e7ee      	b.n	80050ec <__sfp+0x60>
 800510e:	bf00      	nop
 8005110:	080068cc 	.word	0x080068cc
 8005114:	ffff0001 	.word	0xffff0001

08005118 <_fwalk_reent>:
 8005118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800511c:	4606      	mov	r6, r0
 800511e:	4688      	mov	r8, r1
 8005120:	2700      	movs	r7, #0
 8005122:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800512a:	f1b9 0901 	subs.w	r9, r9, #1
 800512e:	d505      	bpl.n	800513c <_fwalk_reent+0x24>
 8005130:	6824      	ldr	r4, [r4, #0]
 8005132:	2c00      	cmp	r4, #0
 8005134:	d1f7      	bne.n	8005126 <_fwalk_reent+0xe>
 8005136:	4638      	mov	r0, r7
 8005138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513c:	89ab      	ldrh	r3, [r5, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d907      	bls.n	8005152 <_fwalk_reent+0x3a>
 8005142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005146:	3301      	adds	r3, #1
 8005148:	d003      	beq.n	8005152 <_fwalk_reent+0x3a>
 800514a:	4629      	mov	r1, r5
 800514c:	4630      	mov	r0, r6
 800514e:	47c0      	blx	r8
 8005150:	4307      	orrs	r7, r0
 8005152:	3568      	adds	r5, #104	; 0x68
 8005154:	e7e9      	b.n	800512a <_fwalk_reent+0x12>

08005156 <__retarget_lock_init_recursive>:
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <__swhatbuf_r>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	460e      	mov	r6, r1
 8005160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005164:	4614      	mov	r4, r2
 8005166:	2900      	cmp	r1, #0
 8005168:	461d      	mov	r5, r3
 800516a:	b096      	sub	sp, #88	; 0x58
 800516c:	da08      	bge.n	8005180 <__swhatbuf_r+0x24>
 800516e:	2200      	movs	r2, #0
 8005170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	061a      	lsls	r2, r3, #24
 8005178:	d410      	bmi.n	800519c <__swhatbuf_r+0x40>
 800517a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517e:	e00e      	b.n	800519e <__swhatbuf_r+0x42>
 8005180:	466a      	mov	r2, sp
 8005182:	f000 fded 	bl	8005d60 <_fstat_r>
 8005186:	2800      	cmp	r0, #0
 8005188:	dbf1      	blt.n	800516e <__swhatbuf_r+0x12>
 800518a:	9a01      	ldr	r2, [sp, #4]
 800518c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005194:	425a      	negs	r2, r3
 8005196:	415a      	adcs	r2, r3
 8005198:	602a      	str	r2, [r5, #0]
 800519a:	e7ee      	b.n	800517a <__swhatbuf_r+0x1e>
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	2000      	movs	r0, #0
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	b016      	add	sp, #88	; 0x58
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080051a8 <__smakebuf_r>:
 80051a8:	898b      	ldrh	r3, [r1, #12]
 80051aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051ac:	079d      	lsls	r5, r3, #30
 80051ae:	4606      	mov	r6, r0
 80051b0:	460c      	mov	r4, r1
 80051b2:	d507      	bpl.n	80051c4 <__smakebuf_r+0x1c>
 80051b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	2301      	movs	r3, #1
 80051be:	6163      	str	r3, [r4, #20]
 80051c0:	b002      	add	sp, #8
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	466a      	mov	r2, sp
 80051c6:	ab01      	add	r3, sp, #4
 80051c8:	f7ff ffc8 	bl	800515c <__swhatbuf_r>
 80051cc:	9900      	ldr	r1, [sp, #0]
 80051ce:	4605      	mov	r5, r0
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 f891 	bl	80052f8 <_malloc_r>
 80051d6:	b948      	cbnz	r0, 80051ec <__smakebuf_r+0x44>
 80051d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051dc:	059a      	lsls	r2, r3, #22
 80051de:	d4ef      	bmi.n	80051c0 <__smakebuf_r+0x18>
 80051e0:	f023 0303 	bic.w	r3, r3, #3
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	e7e3      	b.n	80051b4 <__smakebuf_r+0xc>
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <__smakebuf_r+0x7c>)
 80051ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	6020      	str	r0, [r4, #0]
 80051f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	6120      	str	r0, [r4, #16]
 80051fe:	6163      	str	r3, [r4, #20]
 8005200:	9b01      	ldr	r3, [sp, #4]
 8005202:	b15b      	cbz	r3, 800521c <__smakebuf_r+0x74>
 8005204:	4630      	mov	r0, r6
 8005206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800520a:	f000 fdbb 	bl	8005d84 <_isatty_r>
 800520e:	b128      	cbz	r0, 800521c <__smakebuf_r+0x74>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	89a0      	ldrh	r0, [r4, #12]
 800521e:	4305      	orrs	r5, r0
 8005220:	81a5      	strh	r5, [r4, #12]
 8005222:	e7cd      	b.n	80051c0 <__smakebuf_r+0x18>
 8005224:	08004fb5 	.word	0x08004fb5

08005228 <_free_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4605      	mov	r5, r0
 800522c:	2900      	cmp	r1, #0
 800522e:	d040      	beq.n	80052b2 <_free_r+0x8a>
 8005230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005234:	1f0c      	subs	r4, r1, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	bfb8      	it	lt
 800523a:	18e4      	addlt	r4, r4, r3
 800523c:	f000 fdfa 	bl	8005e34 <__malloc_lock>
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <_free_r+0x8c>)
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	b933      	cbnz	r3, 8005254 <_free_r+0x2c>
 8005246:	6063      	str	r3, [r4, #4]
 8005248:	6014      	str	r4, [r2, #0]
 800524a:	4628      	mov	r0, r5
 800524c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005250:	f000 bdf6 	b.w	8005e40 <__malloc_unlock>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d908      	bls.n	800526a <_free_r+0x42>
 8005258:	6820      	ldr	r0, [r4, #0]
 800525a:	1821      	adds	r1, r4, r0
 800525c:	428b      	cmp	r3, r1
 800525e:	bf01      	itttt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	1809      	addeq	r1, r1, r0
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	e7ed      	b.n	8005246 <_free_r+0x1e>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x4c>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x42>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1850      	adds	r0, r2, r1
 8005278:	42a0      	cmp	r0, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x6c>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	4401      	add	r1, r0
 8005280:	1850      	adds	r0, r2, r1
 8005282:	4283      	cmp	r3, r0
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1e0      	bne.n	800524a <_free_r+0x22>
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4401      	add	r1, r0
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	6053      	str	r3, [r2, #4]
 8005292:	e7da      	b.n	800524a <_free_r+0x22>
 8005294:	d902      	bls.n	800529c <_free_r+0x74>
 8005296:	230c      	movs	r3, #12
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	e7d6      	b.n	800524a <_free_r+0x22>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	1821      	adds	r1, r4, r0
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf01      	itttt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	1809      	addeq	r1, r1, r0
 80052aa:	6021      	streq	r1, [r4, #0]
 80052ac:	6063      	str	r3, [r4, #4]
 80052ae:	6054      	str	r4, [r2, #4]
 80052b0:	e7cb      	b.n	800524a <_free_r+0x22>
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	200002b8 	.word	0x200002b8

080052b8 <sbrk_aligned>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0e      	ldr	r6, [pc, #56]	; (80052f4 <sbrk_aligned+0x3c>)
 80052bc:	460c      	mov	r4, r1
 80052be:	6831      	ldr	r1, [r6, #0]
 80052c0:	4605      	mov	r5, r0
 80052c2:	b911      	cbnz	r1, 80052ca <sbrk_aligned+0x12>
 80052c4:	f000 fcd6 	bl	8005c74 <_sbrk_r>
 80052c8:	6030      	str	r0, [r6, #0]
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fcd1 	bl	8005c74 <_sbrk_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	d00a      	beq.n	80052ec <sbrk_aligned+0x34>
 80052d6:	1cc4      	adds	r4, r0, #3
 80052d8:	f024 0403 	bic.w	r4, r4, #3
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d007      	beq.n	80052f0 <sbrk_aligned+0x38>
 80052e0:	1a21      	subs	r1, r4, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 fcc6 	bl	8005c74 <_sbrk_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d101      	bne.n	80052f0 <sbrk_aligned+0x38>
 80052ec:	f04f 34ff 	mov.w	r4, #4294967295
 80052f0:	4620      	mov	r0, r4
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	200002bc 	.word	0x200002bc

080052f8 <_malloc_r>:
 80052f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	1ccd      	adds	r5, r1, #3
 80052fe:	f025 0503 	bic.w	r5, r5, #3
 8005302:	3508      	adds	r5, #8
 8005304:	2d0c      	cmp	r5, #12
 8005306:	bf38      	it	cc
 8005308:	250c      	movcc	r5, #12
 800530a:	2d00      	cmp	r5, #0
 800530c:	4607      	mov	r7, r0
 800530e:	db01      	blt.n	8005314 <_malloc_r+0x1c>
 8005310:	42a9      	cmp	r1, r5
 8005312:	d905      	bls.n	8005320 <_malloc_r+0x28>
 8005314:	230c      	movs	r3, #12
 8005316:	2600      	movs	r6, #0
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4630      	mov	r0, r6
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	4e2e      	ldr	r6, [pc, #184]	; (80053dc <_malloc_r+0xe4>)
 8005322:	f000 fd87 	bl	8005e34 <__malloc_lock>
 8005326:	6833      	ldr	r3, [r6, #0]
 8005328:	461c      	mov	r4, r3
 800532a:	bb34      	cbnz	r4, 800537a <_malloc_r+0x82>
 800532c:	4629      	mov	r1, r5
 800532e:	4638      	mov	r0, r7
 8005330:	f7ff ffc2 	bl	80052b8 <sbrk_aligned>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	4604      	mov	r4, r0
 8005338:	d14d      	bne.n	80053d6 <_malloc_r+0xde>
 800533a:	6834      	ldr	r4, [r6, #0]
 800533c:	4626      	mov	r6, r4
 800533e:	2e00      	cmp	r6, #0
 8005340:	d140      	bne.n	80053c4 <_malloc_r+0xcc>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4631      	mov	r1, r6
 8005346:	4638      	mov	r0, r7
 8005348:	eb04 0803 	add.w	r8, r4, r3
 800534c:	f000 fc92 	bl	8005c74 <_sbrk_r>
 8005350:	4580      	cmp	r8, r0
 8005352:	d13a      	bne.n	80053ca <_malloc_r+0xd2>
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	3503      	adds	r5, #3
 8005358:	1a6d      	subs	r5, r5, r1
 800535a:	f025 0503 	bic.w	r5, r5, #3
 800535e:	3508      	adds	r5, #8
 8005360:	2d0c      	cmp	r5, #12
 8005362:	bf38      	it	cc
 8005364:	250c      	movcc	r5, #12
 8005366:	4638      	mov	r0, r7
 8005368:	4629      	mov	r1, r5
 800536a:	f7ff ffa5 	bl	80052b8 <sbrk_aligned>
 800536e:	3001      	adds	r0, #1
 8005370:	d02b      	beq.n	80053ca <_malloc_r+0xd2>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	442b      	add	r3, r5
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	e00e      	b.n	8005398 <_malloc_r+0xa0>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	1b52      	subs	r2, r2, r5
 800537e:	d41e      	bmi.n	80053be <_malloc_r+0xc6>
 8005380:	2a0b      	cmp	r2, #11
 8005382:	d916      	bls.n	80053b2 <_malloc_r+0xba>
 8005384:	1961      	adds	r1, r4, r5
 8005386:	42a3      	cmp	r3, r4
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	bf18      	it	ne
 800538c:	6059      	strne	r1, [r3, #4]
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	bf08      	it	eq
 8005392:	6031      	streq	r1, [r6, #0]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4638      	mov	r0, r7
 800539a:	f104 060b 	add.w	r6, r4, #11
 800539e:	f000 fd4f 	bl	8005e40 <__malloc_unlock>
 80053a2:	f026 0607 	bic.w	r6, r6, #7
 80053a6:	1d23      	adds	r3, r4, #4
 80053a8:	1af2      	subs	r2, r6, r3
 80053aa:	d0b6      	beq.n	800531a <_malloc_r+0x22>
 80053ac:	1b9b      	subs	r3, r3, r6
 80053ae:	50a3      	str	r3, [r4, r2]
 80053b0:	e7b3      	b.n	800531a <_malloc_r+0x22>
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	bf0c      	ite	eq
 80053b8:	6032      	streq	r2, [r6, #0]
 80053ba:	605a      	strne	r2, [r3, #4]
 80053bc:	e7ec      	b.n	8005398 <_malloc_r+0xa0>
 80053be:	4623      	mov	r3, r4
 80053c0:	6864      	ldr	r4, [r4, #4]
 80053c2:	e7b2      	b.n	800532a <_malloc_r+0x32>
 80053c4:	4634      	mov	r4, r6
 80053c6:	6876      	ldr	r6, [r6, #4]
 80053c8:	e7b9      	b.n	800533e <_malloc_r+0x46>
 80053ca:	230c      	movs	r3, #12
 80053cc:	4638      	mov	r0, r7
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	f000 fd36 	bl	8005e40 <__malloc_unlock>
 80053d4:	e7a1      	b.n	800531a <_malloc_r+0x22>
 80053d6:	6025      	str	r5, [r4, #0]
 80053d8:	e7de      	b.n	8005398 <_malloc_r+0xa0>
 80053da:	bf00      	nop
 80053dc:	200002b8 	.word	0x200002b8

080053e0 <__ssputs_r>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	688e      	ldr	r6, [r1, #8]
 80053e6:	4682      	mov	sl, r0
 80053e8:	429e      	cmp	r6, r3
 80053ea:	460c      	mov	r4, r1
 80053ec:	4690      	mov	r8, r2
 80053ee:	461f      	mov	r7, r3
 80053f0:	d838      	bhi.n	8005464 <__ssputs_r+0x84>
 80053f2:	898a      	ldrh	r2, [r1, #12]
 80053f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053f8:	d032      	beq.n	8005460 <__ssputs_r+0x80>
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	6909      	ldr	r1, [r1, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	eba5 0901 	sub.w	r9, r5, r1
 8005404:	6965      	ldr	r5, [r4, #20]
 8005406:	444b      	add	r3, r9
 8005408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800540c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005410:	106d      	asrs	r5, r5, #1
 8005412:	429d      	cmp	r5, r3
 8005414:	bf38      	it	cc
 8005416:	461d      	movcc	r5, r3
 8005418:	0553      	lsls	r3, r2, #21
 800541a:	d531      	bpl.n	8005480 <__ssputs_r+0xa0>
 800541c:	4629      	mov	r1, r5
 800541e:	f7ff ff6b 	bl	80052f8 <_malloc_r>
 8005422:	4606      	mov	r6, r0
 8005424:	b950      	cbnz	r0, 800543c <__ssputs_r+0x5c>
 8005426:	230c      	movs	r3, #12
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	f8ca 3000 	str.w	r3, [sl]
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	464a      	mov	r2, r9
 800543e:	6921      	ldr	r1, [r4, #16]
 8005440:	f000 fcd0 	bl	8005de4 <memcpy>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	6126      	str	r6, [r4, #16]
 8005452:	444e      	add	r6, r9
 8005454:	6026      	str	r6, [r4, #0]
 8005456:	463e      	mov	r6, r7
 8005458:	6165      	str	r5, [r4, #20]
 800545a:	eba5 0509 	sub.w	r5, r5, r9
 800545e:	60a5      	str	r5, [r4, #8]
 8005460:	42be      	cmp	r6, r7
 8005462:	d900      	bls.n	8005466 <__ssputs_r+0x86>
 8005464:	463e      	mov	r6, r7
 8005466:	4632      	mov	r2, r6
 8005468:	4641      	mov	r1, r8
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	f000 fcc8 	bl	8005e00 <memmove>
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	2000      	movs	r0, #0
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	4433      	add	r3, r6
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	e7db      	b.n	8005438 <__ssputs_r+0x58>
 8005480:	462a      	mov	r2, r5
 8005482:	f000 fce3 	bl	8005e4c <_realloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1e1      	bne.n	8005450 <__ssputs_r+0x70>
 800548c:	4650      	mov	r0, sl
 800548e:	6921      	ldr	r1, [r4, #16]
 8005490:	f7ff feca 	bl	8005228 <_free_r>
 8005494:	e7c7      	b.n	8005426 <__ssputs_r+0x46>
	...

08005498 <_svfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4698      	mov	r8, r3
 800549e:	898b      	ldrh	r3, [r1, #12]
 80054a0:	4607      	mov	r7, r0
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	460d      	mov	r5, r1
 80054a6:	4614      	mov	r4, r2
 80054a8:	b09d      	sub	sp, #116	; 0x74
 80054aa:	d50e      	bpl.n	80054ca <_svfiprintf_r+0x32>
 80054ac:	690b      	ldr	r3, [r1, #16]
 80054ae:	b963      	cbnz	r3, 80054ca <_svfiprintf_r+0x32>
 80054b0:	2140      	movs	r1, #64	; 0x40
 80054b2:	f7ff ff21 	bl	80052f8 <_malloc_r>
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	6128      	str	r0, [r5, #16]
 80054ba:	b920      	cbnz	r0, 80054c6 <_svfiprintf_r+0x2e>
 80054bc:	230c      	movs	r3, #12
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	e0d1      	b.n	800566a <_svfiprintf_r+0x1d2>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	616b      	str	r3, [r5, #20]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	2320      	movs	r3, #32
 80054d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d4:	2330      	movs	r3, #48	; 0x30
 80054d6:	f04f 0901 	mov.w	r9, #1
 80054da:	f8cd 800c 	str.w	r8, [sp, #12]
 80054de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005684 <_svfiprintf_r+0x1ec>
 80054e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e6:	4623      	mov	r3, r4
 80054e8:	469a      	mov	sl, r3
 80054ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ee:	b10a      	cbz	r2, 80054f4 <_svfiprintf_r+0x5c>
 80054f0:	2a25      	cmp	r2, #37	; 0x25
 80054f2:	d1f9      	bne.n	80054e8 <_svfiprintf_r+0x50>
 80054f4:	ebba 0b04 	subs.w	fp, sl, r4
 80054f8:	d00b      	beq.n	8005512 <_svfiprintf_r+0x7a>
 80054fa:	465b      	mov	r3, fp
 80054fc:	4622      	mov	r2, r4
 80054fe:	4629      	mov	r1, r5
 8005500:	4638      	mov	r0, r7
 8005502:	f7ff ff6d 	bl	80053e0 <__ssputs_r>
 8005506:	3001      	adds	r0, #1
 8005508:	f000 80aa 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800550c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550e:	445a      	add	r2, fp
 8005510:	9209      	str	r2, [sp, #36]	; 0x24
 8005512:	f89a 3000 	ldrb.w	r3, [sl]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80a2 	beq.w	8005660 <_svfiprintf_r+0x1c8>
 800551c:	2300      	movs	r3, #0
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005526:	f10a 0a01 	add.w	sl, sl, #1
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	9307      	str	r3, [sp, #28]
 800552e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005532:	931a      	str	r3, [sp, #104]	; 0x68
 8005534:	4654      	mov	r4, sl
 8005536:	2205      	movs	r2, #5
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	4851      	ldr	r0, [pc, #324]	; (8005684 <_svfiprintf_r+0x1ec>)
 800553e:	f000 fc43 	bl	8005dc8 <memchr>
 8005542:	9a04      	ldr	r2, [sp, #16]
 8005544:	b9d8      	cbnz	r0, 800557e <_svfiprintf_r+0xe6>
 8005546:	06d0      	lsls	r0, r2, #27
 8005548:	bf44      	itt	mi
 800554a:	2320      	movmi	r3, #32
 800554c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005550:	0711      	lsls	r1, r2, #28
 8005552:	bf44      	itt	mi
 8005554:	232b      	movmi	r3, #43	; 0x2b
 8005556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555a:	f89a 3000 	ldrb.w	r3, [sl]
 800555e:	2b2a      	cmp	r3, #42	; 0x2a
 8005560:	d015      	beq.n	800558e <_svfiprintf_r+0xf6>
 8005562:	4654      	mov	r4, sl
 8005564:	2000      	movs	r0, #0
 8005566:	f04f 0c0a 	mov.w	ip, #10
 800556a:	9a07      	ldr	r2, [sp, #28]
 800556c:	4621      	mov	r1, r4
 800556e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005572:	3b30      	subs	r3, #48	; 0x30
 8005574:	2b09      	cmp	r3, #9
 8005576:	d94e      	bls.n	8005616 <_svfiprintf_r+0x17e>
 8005578:	b1b0      	cbz	r0, 80055a8 <_svfiprintf_r+0x110>
 800557a:	9207      	str	r2, [sp, #28]
 800557c:	e014      	b.n	80055a8 <_svfiprintf_r+0x110>
 800557e:	eba0 0308 	sub.w	r3, r0, r8
 8005582:	fa09 f303 	lsl.w	r3, r9, r3
 8005586:	4313      	orrs	r3, r2
 8005588:	46a2      	mov	sl, r4
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	e7d2      	b.n	8005534 <_svfiprintf_r+0x9c>
 800558e:	9b03      	ldr	r3, [sp, #12]
 8005590:	1d19      	adds	r1, r3, #4
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	9103      	str	r1, [sp, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfbb      	ittet	lt
 800559a:	425b      	neglt	r3, r3
 800559c:	f042 0202 	orrlt.w	r2, r2, #2
 80055a0:	9307      	strge	r3, [sp, #28]
 80055a2:	9307      	strlt	r3, [sp, #28]
 80055a4:	bfb8      	it	lt
 80055a6:	9204      	strlt	r2, [sp, #16]
 80055a8:	7823      	ldrb	r3, [r4, #0]
 80055aa:	2b2e      	cmp	r3, #46	; 0x2e
 80055ac:	d10c      	bne.n	80055c8 <_svfiprintf_r+0x130>
 80055ae:	7863      	ldrb	r3, [r4, #1]
 80055b0:	2b2a      	cmp	r3, #42	; 0x2a
 80055b2:	d135      	bne.n	8005620 <_svfiprintf_r+0x188>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	3402      	adds	r4, #2
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	9203      	str	r2, [sp, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bfb8      	it	lt
 80055c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005688 <_svfiprintf_r+0x1f0>
 80055cc:	2203      	movs	r2, #3
 80055ce:	4650      	mov	r0, sl
 80055d0:	7821      	ldrb	r1, [r4, #0]
 80055d2:	f000 fbf9 	bl	8005dc8 <memchr>
 80055d6:	b140      	cbz	r0, 80055ea <_svfiprintf_r+0x152>
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	eba0 000a 	sub.w	r0, r0, sl
 80055de:	fa03 f000 	lsl.w	r0, r3, r0
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	3401      	adds	r4, #1
 80055e6:	4303      	orrs	r3, r0
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ee:	2206      	movs	r2, #6
 80055f0:	4826      	ldr	r0, [pc, #152]	; (800568c <_svfiprintf_r+0x1f4>)
 80055f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f6:	f000 fbe7 	bl	8005dc8 <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d038      	beq.n	8005670 <_svfiprintf_r+0x1d8>
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <_svfiprintf_r+0x1f8>)
 8005600:	bb1b      	cbnz	r3, 800564a <_svfiprintf_r+0x1b2>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	3308      	adds	r3, #8
 800560c:	9303      	str	r3, [sp, #12]
 800560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005610:	4433      	add	r3, r6
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	e767      	b.n	80054e6 <_svfiprintf_r+0x4e>
 8005616:	460c      	mov	r4, r1
 8005618:	2001      	movs	r0, #1
 800561a:	fb0c 3202 	mla	r2, ip, r2, r3
 800561e:	e7a5      	b.n	800556c <_svfiprintf_r+0xd4>
 8005620:	2300      	movs	r3, #0
 8005622:	f04f 0c0a 	mov.w	ip, #10
 8005626:	4619      	mov	r1, r3
 8005628:	3401      	adds	r4, #1
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	4620      	mov	r0, r4
 800562e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005632:	3a30      	subs	r2, #48	; 0x30
 8005634:	2a09      	cmp	r2, #9
 8005636:	d903      	bls.n	8005640 <_svfiprintf_r+0x1a8>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0c5      	beq.n	80055c8 <_svfiprintf_r+0x130>
 800563c:	9105      	str	r1, [sp, #20]
 800563e:	e7c3      	b.n	80055c8 <_svfiprintf_r+0x130>
 8005640:	4604      	mov	r4, r0
 8005642:	2301      	movs	r3, #1
 8005644:	fb0c 2101 	mla	r1, ip, r1, r2
 8005648:	e7f0      	b.n	800562c <_svfiprintf_r+0x194>
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462a      	mov	r2, r5
 8005650:	4638      	mov	r0, r7
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <_svfiprintf_r+0x1fc>)
 8005654:	a904      	add	r1, sp, #16
 8005656:	f3af 8000 	nop.w
 800565a:	1c42      	adds	r2, r0, #1
 800565c:	4606      	mov	r6, r0
 800565e:	d1d6      	bne.n	800560e <_svfiprintf_r+0x176>
 8005660:	89ab      	ldrh	r3, [r5, #12]
 8005662:	065b      	lsls	r3, r3, #25
 8005664:	f53f af2c 	bmi.w	80054c0 <_svfiprintf_r+0x28>
 8005668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566a:	b01d      	add	sp, #116	; 0x74
 800566c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4638      	mov	r0, r7
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <_svfiprintf_r+0x1fc>)
 800567a:	a904      	add	r1, sp, #16
 800567c:	f000 f9d4 	bl	8005a28 <_printf_i>
 8005680:	e7eb      	b.n	800565a <_svfiprintf_r+0x1c2>
 8005682:	bf00      	nop
 8005684:	08006930 	.word	0x08006930
 8005688:	08006936 	.word	0x08006936
 800568c:	0800693a 	.word	0x0800693a
 8005690:	00000000 	.word	0x00000000
 8005694:	080053e1 	.word	0x080053e1

08005698 <__sfputc_r>:
 8005698:	6893      	ldr	r3, [r2, #8]
 800569a:	b410      	push	{r4}
 800569c:	3b01      	subs	r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	6093      	str	r3, [r2, #8]
 80056a2:	da07      	bge.n	80056b4 <__sfputc_r+0x1c>
 80056a4:	6994      	ldr	r4, [r2, #24]
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	db01      	blt.n	80056ae <__sfputc_r+0x16>
 80056aa:	290a      	cmp	r1, #10
 80056ac:	d102      	bne.n	80056b4 <__sfputc_r+0x1c>
 80056ae:	bc10      	pop	{r4}
 80056b0:	f7ff bade 	b.w	8004c70 <__swbuf_r>
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	1c58      	adds	r0, r3, #1
 80056b8:	6010      	str	r0, [r2, #0]
 80056ba:	7019      	strb	r1, [r3, #0]
 80056bc:	4608      	mov	r0, r1
 80056be:	bc10      	pop	{r4}
 80056c0:	4770      	bx	lr

080056c2 <__sfputs_r>:
 80056c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	4614      	mov	r4, r2
 80056ca:	18d5      	adds	r5, r2, r3
 80056cc:	42ac      	cmp	r4, r5
 80056ce:	d101      	bne.n	80056d4 <__sfputs_r+0x12>
 80056d0:	2000      	movs	r0, #0
 80056d2:	e007      	b.n	80056e4 <__sfputs_r+0x22>
 80056d4:	463a      	mov	r2, r7
 80056d6:	4630      	mov	r0, r6
 80056d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056dc:	f7ff ffdc 	bl	8005698 <__sfputc_r>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d1f3      	bne.n	80056cc <__sfputs_r+0xa>
 80056e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056e8 <_vfiprintf_r>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	460d      	mov	r5, r1
 80056ee:	4614      	mov	r4, r2
 80056f0:	4698      	mov	r8, r3
 80056f2:	4606      	mov	r6, r0
 80056f4:	b09d      	sub	sp, #116	; 0x74
 80056f6:	b118      	cbz	r0, 8005700 <_vfiprintf_r+0x18>
 80056f8:	6983      	ldr	r3, [r0, #24]
 80056fa:	b90b      	cbnz	r3, 8005700 <_vfiprintf_r+0x18>
 80056fc:	f7ff fc8e 	bl	800501c <__sinit>
 8005700:	4b89      	ldr	r3, [pc, #548]	; (8005928 <_vfiprintf_r+0x240>)
 8005702:	429d      	cmp	r5, r3
 8005704:	d11b      	bne.n	800573e <_vfiprintf_r+0x56>
 8005706:	6875      	ldr	r5, [r6, #4]
 8005708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d405      	bmi.n	800571a <_vfiprintf_r+0x32>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	059a      	lsls	r2, r3, #22
 8005712:	d402      	bmi.n	800571a <_vfiprintf_r+0x32>
 8005714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005716:	f7ff fd1f 	bl	8005158 <__retarget_lock_acquire_recursive>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	d501      	bpl.n	8005724 <_vfiprintf_r+0x3c>
 8005720:	692b      	ldr	r3, [r5, #16]
 8005722:	b9eb      	cbnz	r3, 8005760 <_vfiprintf_r+0x78>
 8005724:	4629      	mov	r1, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff faf4 	bl	8004d14 <__swsetup_r>
 800572c:	b1c0      	cbz	r0, 8005760 <_vfiprintf_r+0x78>
 800572e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005730:	07dc      	lsls	r4, r3, #31
 8005732:	d50e      	bpl.n	8005752 <_vfiprintf_r+0x6a>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	b01d      	add	sp, #116	; 0x74
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	4b7b      	ldr	r3, [pc, #492]	; (800592c <_vfiprintf_r+0x244>)
 8005740:	429d      	cmp	r5, r3
 8005742:	d101      	bne.n	8005748 <_vfiprintf_r+0x60>
 8005744:	68b5      	ldr	r5, [r6, #8]
 8005746:	e7df      	b.n	8005708 <_vfiprintf_r+0x20>
 8005748:	4b79      	ldr	r3, [pc, #484]	; (8005930 <_vfiprintf_r+0x248>)
 800574a:	429d      	cmp	r5, r3
 800574c:	bf08      	it	eq
 800574e:	68f5      	ldreq	r5, [r6, #12]
 8005750:	e7da      	b.n	8005708 <_vfiprintf_r+0x20>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	0598      	lsls	r0, r3, #22
 8005756:	d4ed      	bmi.n	8005734 <_vfiprintf_r+0x4c>
 8005758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800575a:	f7ff fcfe 	bl	800515a <__retarget_lock_release_recursive>
 800575e:	e7e9      	b.n	8005734 <_vfiprintf_r+0x4c>
 8005760:	2300      	movs	r3, #0
 8005762:	9309      	str	r3, [sp, #36]	; 0x24
 8005764:	2320      	movs	r3, #32
 8005766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800576a:	2330      	movs	r3, #48	; 0x30
 800576c:	f04f 0901 	mov.w	r9, #1
 8005770:	f8cd 800c 	str.w	r8, [sp, #12]
 8005774:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005934 <_vfiprintf_r+0x24c>
 8005778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800577c:	4623      	mov	r3, r4
 800577e:	469a      	mov	sl, r3
 8005780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005784:	b10a      	cbz	r2, 800578a <_vfiprintf_r+0xa2>
 8005786:	2a25      	cmp	r2, #37	; 0x25
 8005788:	d1f9      	bne.n	800577e <_vfiprintf_r+0x96>
 800578a:	ebba 0b04 	subs.w	fp, sl, r4
 800578e:	d00b      	beq.n	80057a8 <_vfiprintf_r+0xc0>
 8005790:	465b      	mov	r3, fp
 8005792:	4622      	mov	r2, r4
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f7ff ff93 	bl	80056c2 <__sfputs_r>
 800579c:	3001      	adds	r0, #1
 800579e:	f000 80aa 	beq.w	80058f6 <_vfiprintf_r+0x20e>
 80057a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057a4:	445a      	add	r2, fp
 80057a6:	9209      	str	r2, [sp, #36]	; 0x24
 80057a8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80a2 	beq.w	80058f6 <_vfiprintf_r+0x20e>
 80057b2:	2300      	movs	r3, #0
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057bc:	f10a 0a01 	add.w	sl, sl, #1
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	9307      	str	r3, [sp, #28]
 80057c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057c8:	931a      	str	r3, [sp, #104]	; 0x68
 80057ca:	4654      	mov	r4, sl
 80057cc:	2205      	movs	r2, #5
 80057ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d2:	4858      	ldr	r0, [pc, #352]	; (8005934 <_vfiprintf_r+0x24c>)
 80057d4:	f000 faf8 	bl	8005dc8 <memchr>
 80057d8:	9a04      	ldr	r2, [sp, #16]
 80057da:	b9d8      	cbnz	r0, 8005814 <_vfiprintf_r+0x12c>
 80057dc:	06d1      	lsls	r1, r2, #27
 80057de:	bf44      	itt	mi
 80057e0:	2320      	movmi	r3, #32
 80057e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e6:	0713      	lsls	r3, r2, #28
 80057e8:	bf44      	itt	mi
 80057ea:	232b      	movmi	r3, #43	; 0x2b
 80057ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f0:	f89a 3000 	ldrb.w	r3, [sl]
 80057f4:	2b2a      	cmp	r3, #42	; 0x2a
 80057f6:	d015      	beq.n	8005824 <_vfiprintf_r+0x13c>
 80057f8:	4654      	mov	r4, sl
 80057fa:	2000      	movs	r0, #0
 80057fc:	f04f 0c0a 	mov.w	ip, #10
 8005800:	9a07      	ldr	r2, [sp, #28]
 8005802:	4621      	mov	r1, r4
 8005804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005808:	3b30      	subs	r3, #48	; 0x30
 800580a:	2b09      	cmp	r3, #9
 800580c:	d94e      	bls.n	80058ac <_vfiprintf_r+0x1c4>
 800580e:	b1b0      	cbz	r0, 800583e <_vfiprintf_r+0x156>
 8005810:	9207      	str	r2, [sp, #28]
 8005812:	e014      	b.n	800583e <_vfiprintf_r+0x156>
 8005814:	eba0 0308 	sub.w	r3, r0, r8
 8005818:	fa09 f303 	lsl.w	r3, r9, r3
 800581c:	4313      	orrs	r3, r2
 800581e:	46a2      	mov	sl, r4
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	e7d2      	b.n	80057ca <_vfiprintf_r+0xe2>
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	1d19      	adds	r1, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	9103      	str	r1, [sp, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfbb      	ittet	lt
 8005830:	425b      	neglt	r3, r3
 8005832:	f042 0202 	orrlt.w	r2, r2, #2
 8005836:	9307      	strge	r3, [sp, #28]
 8005838:	9307      	strlt	r3, [sp, #28]
 800583a:	bfb8      	it	lt
 800583c:	9204      	strlt	r2, [sp, #16]
 800583e:	7823      	ldrb	r3, [r4, #0]
 8005840:	2b2e      	cmp	r3, #46	; 0x2e
 8005842:	d10c      	bne.n	800585e <_vfiprintf_r+0x176>
 8005844:	7863      	ldrb	r3, [r4, #1]
 8005846:	2b2a      	cmp	r3, #42	; 0x2a
 8005848:	d135      	bne.n	80058b6 <_vfiprintf_r+0x1ce>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	3402      	adds	r4, #2
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	9203      	str	r2, [sp, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	bfb8      	it	lt
 8005858:	f04f 33ff 	movlt.w	r3, #4294967295
 800585c:	9305      	str	r3, [sp, #20]
 800585e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005938 <_vfiprintf_r+0x250>
 8005862:	2203      	movs	r2, #3
 8005864:	4650      	mov	r0, sl
 8005866:	7821      	ldrb	r1, [r4, #0]
 8005868:	f000 faae 	bl	8005dc8 <memchr>
 800586c:	b140      	cbz	r0, 8005880 <_vfiprintf_r+0x198>
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	eba0 000a 	sub.w	r0, r0, sl
 8005874:	fa03 f000 	lsl.w	r0, r3, r0
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	3401      	adds	r4, #1
 800587c:	4303      	orrs	r3, r0
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005884:	2206      	movs	r2, #6
 8005886:	482d      	ldr	r0, [pc, #180]	; (800593c <_vfiprintf_r+0x254>)
 8005888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800588c:	f000 fa9c 	bl	8005dc8 <memchr>
 8005890:	2800      	cmp	r0, #0
 8005892:	d03f      	beq.n	8005914 <_vfiprintf_r+0x22c>
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <_vfiprintf_r+0x258>)
 8005896:	bb1b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x1f8>
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	3307      	adds	r3, #7
 800589c:	f023 0307 	bic.w	r3, r3, #7
 80058a0:	3308      	adds	r3, #8
 80058a2:	9303      	str	r3, [sp, #12]
 80058a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a6:	443b      	add	r3, r7
 80058a8:	9309      	str	r3, [sp, #36]	; 0x24
 80058aa:	e767      	b.n	800577c <_vfiprintf_r+0x94>
 80058ac:	460c      	mov	r4, r1
 80058ae:	2001      	movs	r0, #1
 80058b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b4:	e7a5      	b.n	8005802 <_vfiprintf_r+0x11a>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f04f 0c0a 	mov.w	ip, #10
 80058bc:	4619      	mov	r1, r3
 80058be:	3401      	adds	r4, #1
 80058c0:	9305      	str	r3, [sp, #20]
 80058c2:	4620      	mov	r0, r4
 80058c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c8:	3a30      	subs	r2, #48	; 0x30
 80058ca:	2a09      	cmp	r2, #9
 80058cc:	d903      	bls.n	80058d6 <_vfiprintf_r+0x1ee>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0c5      	beq.n	800585e <_vfiprintf_r+0x176>
 80058d2:	9105      	str	r1, [sp, #20]
 80058d4:	e7c3      	b.n	800585e <_vfiprintf_r+0x176>
 80058d6:	4604      	mov	r4, r0
 80058d8:	2301      	movs	r3, #1
 80058da:	fb0c 2101 	mla	r1, ip, r1, r2
 80058de:	e7f0      	b.n	80058c2 <_vfiprintf_r+0x1da>
 80058e0:	ab03      	add	r3, sp, #12
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	462a      	mov	r2, r5
 80058e6:	4630      	mov	r0, r6
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <_vfiprintf_r+0x25c>)
 80058ea:	a904      	add	r1, sp, #16
 80058ec:	f3af 8000 	nop.w
 80058f0:	4607      	mov	r7, r0
 80058f2:	1c78      	adds	r0, r7, #1
 80058f4:	d1d6      	bne.n	80058a4 <_vfiprintf_r+0x1bc>
 80058f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f8:	07d9      	lsls	r1, r3, #31
 80058fa:	d405      	bmi.n	8005908 <_vfiprintf_r+0x220>
 80058fc:	89ab      	ldrh	r3, [r5, #12]
 80058fe:	059a      	lsls	r2, r3, #22
 8005900:	d402      	bmi.n	8005908 <_vfiprintf_r+0x220>
 8005902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005904:	f7ff fc29 	bl	800515a <__retarget_lock_release_recursive>
 8005908:	89ab      	ldrh	r3, [r5, #12]
 800590a:	065b      	lsls	r3, r3, #25
 800590c:	f53f af12 	bmi.w	8005734 <_vfiprintf_r+0x4c>
 8005910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005912:	e711      	b.n	8005738 <_vfiprintf_r+0x50>
 8005914:	ab03      	add	r3, sp, #12
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	462a      	mov	r2, r5
 800591a:	4630      	mov	r0, r6
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <_vfiprintf_r+0x25c>)
 800591e:	a904      	add	r1, sp, #16
 8005920:	f000 f882 	bl	8005a28 <_printf_i>
 8005924:	e7e4      	b.n	80058f0 <_vfiprintf_r+0x208>
 8005926:	bf00      	nop
 8005928:	080068f0 	.word	0x080068f0
 800592c:	08006910 	.word	0x08006910
 8005930:	080068d0 	.word	0x080068d0
 8005934:	08006930 	.word	0x08006930
 8005938:	08006936 	.word	0x08006936
 800593c:	0800693a 	.word	0x0800693a
 8005940:	00000000 	.word	0x00000000
 8005944:	080056c3 	.word	0x080056c3

08005948 <_printf_common>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4616      	mov	r6, r2
 800594e:	4699      	mov	r9, r3
 8005950:	688a      	ldr	r2, [r1, #8]
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	4607      	mov	r7, r0
 8005956:	4293      	cmp	r3, r2
 8005958:	bfb8      	it	lt
 800595a:	4613      	movlt	r3, r2
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005962:	460c      	mov	r4, r1
 8005964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005968:	b10a      	cbz	r2, 800596e <_printf_common+0x26>
 800596a:	3301      	adds	r3, #1
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	6833      	ldrmi	r3, [r6, #0]
 8005976:	3302      	addmi	r3, #2
 8005978:	6033      	strmi	r3, [r6, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d106      	bne.n	8005990 <_printf_common+0x48>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc28      	bgt.n	80059e2 <_printf_common+0x9a>
 8005990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005994:	1e13      	subs	r3, r2, #0
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	bf18      	it	ne
 800599a:	2301      	movne	r3, #1
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d42d      	bmi.n	80059fc <_printf_common+0xb4>
 80059a0:	4649      	mov	r1, r9
 80059a2:	4638      	mov	r0, r7
 80059a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a8:	47c0      	blx	r8
 80059aa:	3001      	adds	r0, #1
 80059ac:	d020      	beq.n	80059f0 <_printf_common+0xa8>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	68e5      	ldr	r5, [r4, #12]
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf18      	it	ne
 80059ba:	2500      	movne	r5, #0
 80059bc:	6832      	ldr	r2, [r6, #0]
 80059be:	f04f 0600 	mov.w	r6, #0
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	bf08      	it	eq
 80059c6:	1aad      	subeq	r5, r5, r2
 80059c8:	6922      	ldr	r2, [r4, #16]
 80059ca:	bf08      	it	eq
 80059cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bfc4      	itt	gt
 80059d4:	1a9b      	subgt	r3, r3, r2
 80059d6:	18ed      	addgt	r5, r5, r3
 80059d8:	341a      	adds	r4, #26
 80059da:	42b5      	cmp	r5, r6
 80059dc:	d11a      	bne.n	8005a14 <_printf_common+0xcc>
 80059de:	2000      	movs	r0, #0
 80059e0:	e008      	b.n	80059f4 <_printf_common+0xac>
 80059e2:	2301      	movs	r3, #1
 80059e4:	4652      	mov	r2, sl
 80059e6:	4649      	mov	r1, r9
 80059e8:	4638      	mov	r0, r7
 80059ea:	47c0      	blx	r8
 80059ec:	3001      	adds	r0, #1
 80059ee:	d103      	bne.n	80059f8 <_printf_common+0xb0>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	3501      	adds	r5, #1
 80059fa:	e7c4      	b.n	8005986 <_printf_common+0x3e>
 80059fc:	2030      	movs	r0, #48	; 0x30
 80059fe:	18e1      	adds	r1, r4, r3
 8005a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a0a:	4422      	add	r2, r4
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a12:	e7c5      	b.n	80059a0 <_printf_common+0x58>
 8005a14:	2301      	movs	r3, #1
 8005a16:	4622      	mov	r2, r4
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0e6      	beq.n	80059f0 <_printf_common+0xa8>
 8005a22:	3601      	adds	r6, #1
 8005a24:	e7d9      	b.n	80059da <_printf_common+0x92>
	...

08005a28 <_printf_i>:
 8005a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	7e0f      	ldrb	r7, [r1, #24]
 8005a2e:	4691      	mov	r9, r2
 8005a30:	2f78      	cmp	r7, #120	; 0x78
 8005a32:	4680      	mov	r8, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	469a      	mov	sl, r3
 8005a38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a3e:	d807      	bhi.n	8005a50 <_printf_i+0x28>
 8005a40:	2f62      	cmp	r7, #98	; 0x62
 8005a42:	d80a      	bhi.n	8005a5a <_printf_i+0x32>
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	f000 80d9 	beq.w	8005bfc <_printf_i+0x1d4>
 8005a4a:	2f58      	cmp	r7, #88	; 0x58
 8005a4c:	f000 80a4 	beq.w	8005b98 <_printf_i+0x170>
 8005a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a58:	e03a      	b.n	8005ad0 <_printf_i+0xa8>
 8005a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a5e:	2b15      	cmp	r3, #21
 8005a60:	d8f6      	bhi.n	8005a50 <_printf_i+0x28>
 8005a62:	a101      	add	r1, pc, #4	; (adr r1, 8005a68 <_printf_i+0x40>)
 8005a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005a51 	.word	0x08005a51
 8005a74:	08005a51 	.word	0x08005a51
 8005a78:	08005a51 	.word	0x08005a51
 8005a7c:	08005a51 	.word	0x08005a51
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005a51 	.word	0x08005a51
 8005a88:	08005a51 	.word	0x08005a51
 8005a8c:	08005a51 	.word	0x08005a51
 8005a90:	08005a51 	.word	0x08005a51
 8005a94:	08005be3 	.word	0x08005be3
 8005a98:	08005b05 	.word	0x08005b05
 8005a9c:	08005bc5 	.word	0x08005bc5
 8005aa0:	08005a51 	.word	0x08005a51
 8005aa4:	08005a51 	.word	0x08005a51
 8005aa8:	08005c05 	.word	0x08005c05
 8005aac:	08005a51 	.word	0x08005a51
 8005ab0:	08005b05 	.word	0x08005b05
 8005ab4:	08005a51 	.word	0x08005a51
 8005ab8:	08005a51 	.word	0x08005a51
 8005abc:	08005bcd 	.word	0x08005bcd
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0a4      	b.n	8005c1e <_printf_i+0x1f6>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	6829      	ldr	r1, [r5, #0]
 8005ad8:	0606      	lsls	r6, r0, #24
 8005ada:	f101 0304 	add.w	r3, r1, #4
 8005ade:	d50a      	bpl.n	8005af6 <_printf_i+0xce>
 8005ae0:	680e      	ldr	r6, [r1, #0]
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	da03      	bge.n	8005af0 <_printf_i+0xc8>
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	4276      	negs	r6, r6
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	230a      	movs	r3, #10
 8005af2:	485e      	ldr	r0, [pc, #376]	; (8005c6c <_printf_i+0x244>)
 8005af4:	e019      	b.n	8005b2a <_printf_i+0x102>
 8005af6:	680e      	ldr	r6, [r1, #0]
 8005af8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	bf18      	it	ne
 8005b00:	b236      	sxthne	r6, r6
 8005b02:	e7ef      	b.n	8005ae4 <_printf_i+0xbc>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	1d19      	adds	r1, r3, #4
 8005b0a:	6029      	str	r1, [r5, #0]
 8005b0c:	0601      	lsls	r1, r0, #24
 8005b0e:	d501      	bpl.n	8005b14 <_printf_i+0xec>
 8005b10:	681e      	ldr	r6, [r3, #0]
 8005b12:	e002      	b.n	8005b1a <_printf_i+0xf2>
 8005b14:	0646      	lsls	r6, r0, #25
 8005b16:	d5fb      	bpl.n	8005b10 <_printf_i+0xe8>
 8005b18:	881e      	ldrh	r6, [r3, #0]
 8005b1a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2308      	moveq	r3, #8
 8005b20:	230a      	movne	r3, #10
 8005b22:	4852      	ldr	r0, [pc, #328]	; (8005c6c <_printf_i+0x244>)
 8005b24:	2100      	movs	r1, #0
 8005b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b2a:	6865      	ldr	r5, [r4, #4]
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	bfa8      	it	ge
 8005b30:	6821      	ldrge	r1, [r4, #0]
 8005b32:	60a5      	str	r5, [r4, #8]
 8005b34:	bfa4      	itt	ge
 8005b36:	f021 0104 	bicge.w	r1, r1, #4
 8005b3a:	6021      	strge	r1, [r4, #0]
 8005b3c:	b90e      	cbnz	r6, 8005b42 <_printf_i+0x11a>
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	d04d      	beq.n	8005bde <_printf_i+0x1b6>
 8005b42:	4615      	mov	r5, r2
 8005b44:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b48:	fb03 6711 	mls	r7, r3, r1, r6
 8005b4c:	5dc7      	ldrb	r7, [r0, r7]
 8005b4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b52:	4637      	mov	r7, r6
 8005b54:	42bb      	cmp	r3, r7
 8005b56:	460e      	mov	r6, r1
 8005b58:	d9f4      	bls.n	8005b44 <_printf_i+0x11c>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d10b      	bne.n	8005b76 <_printf_i+0x14e>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07de      	lsls	r6, r3, #31
 8005b62:	d508      	bpl.n	8005b76 <_printf_i+0x14e>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6861      	ldr	r1, [r4, #4]
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	bfde      	ittt	le
 8005b6c:	2330      	movle	r3, #48	; 0x30
 8005b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	6122      	str	r2, [r4, #16]
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f8cd a000 	str.w	sl, [sp]
 8005b84:	aa03      	add	r2, sp, #12
 8005b86:	f7ff fedf 	bl	8005948 <_printf_common>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d14c      	bne.n	8005c28 <_printf_i+0x200>
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	b004      	add	sp, #16
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	4834      	ldr	r0, [pc, #208]	; (8005c6c <_printf_i+0x244>)
 8005b9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b9e:	6829      	ldr	r1, [r5, #0]
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ba6:	6029      	str	r1, [r5, #0]
 8005ba8:	061d      	lsls	r5, r3, #24
 8005baa:	d514      	bpl.n	8005bd6 <_printf_i+0x1ae>
 8005bac:	07df      	lsls	r7, r3, #31
 8005bae:	bf44      	itt	mi
 8005bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb4:	6023      	strmi	r3, [r4, #0]
 8005bb6:	b91e      	cbnz	r6, 8005bc0 <_printf_i+0x198>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	e7af      	b.n	8005b24 <_printf_i+0xfc>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	f043 0320 	orr.w	r3, r3, #32
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	2378      	movs	r3, #120	; 0x78
 8005bce:	4828      	ldr	r0, [pc, #160]	; (8005c70 <_printf_i+0x248>)
 8005bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bd4:	e7e3      	b.n	8005b9e <_printf_i+0x176>
 8005bd6:	0659      	lsls	r1, r3, #25
 8005bd8:	bf48      	it	mi
 8005bda:	b2b6      	uxthmi	r6, r6
 8005bdc:	e7e6      	b.n	8005bac <_printf_i+0x184>
 8005bde:	4615      	mov	r5, r2
 8005be0:	e7bb      	b.n	8005b5a <_printf_i+0x132>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	6826      	ldr	r6, [r4, #0]
 8005be6:	1d18      	adds	r0, r3, #4
 8005be8:	6961      	ldr	r1, [r4, #20]
 8005bea:	6028      	str	r0, [r5, #0]
 8005bec:	0635      	lsls	r5, r6, #24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	d501      	bpl.n	8005bf6 <_printf_i+0x1ce>
 8005bf2:	6019      	str	r1, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <_printf_i+0x1d4>
 8005bf6:	0670      	lsls	r0, r6, #25
 8005bf8:	d5fb      	bpl.n	8005bf2 <_printf_i+0x1ca>
 8005bfa:	8019      	strh	r1, [r3, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4615      	mov	r5, r2
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e7ba      	b.n	8005b7a <_printf_i+0x152>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	2100      	movs	r1, #0
 8005c08:	1d1a      	adds	r2, r3, #4
 8005c0a:	602a      	str	r2, [r5, #0]
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	6862      	ldr	r2, [r4, #4]
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 f8d9 	bl	8005dc8 <memchr>
 8005c16:	b108      	cbz	r0, 8005c1c <_printf_i+0x1f4>
 8005c18:	1b40      	subs	r0, r0, r5
 8005c1a:	6060      	str	r0, [r4, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	2300      	movs	r3, #0
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c26:	e7a8      	b.n	8005b7a <_printf_i+0x152>
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	47d0      	blx	sl
 8005c32:	3001      	adds	r0, #1
 8005c34:	d0ab      	beq.n	8005b8e <_printf_i+0x166>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	079b      	lsls	r3, r3, #30
 8005c3a:	d413      	bmi.n	8005c64 <_printf_i+0x23c>
 8005c3c:	68e0      	ldr	r0, [r4, #12]
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	4298      	cmp	r0, r3
 8005c42:	bfb8      	it	lt
 8005c44:	4618      	movlt	r0, r3
 8005c46:	e7a4      	b.n	8005b92 <_printf_i+0x16a>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4640      	mov	r0, r8
 8005c50:	47d0      	blx	sl
 8005c52:	3001      	adds	r0, #1
 8005c54:	d09b      	beq.n	8005b8e <_printf_i+0x166>
 8005c56:	3501      	adds	r5, #1
 8005c58:	68e3      	ldr	r3, [r4, #12]
 8005c5a:	9903      	ldr	r1, [sp, #12]
 8005c5c:	1a5b      	subs	r3, r3, r1
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	dcf2      	bgt.n	8005c48 <_printf_i+0x220>
 8005c62:	e7eb      	b.n	8005c3c <_printf_i+0x214>
 8005c64:	2500      	movs	r5, #0
 8005c66:	f104 0619 	add.w	r6, r4, #25
 8005c6a:	e7f5      	b.n	8005c58 <_printf_i+0x230>
 8005c6c:	08006941 	.word	0x08006941
 8005c70:	08006952 	.word	0x08006952

08005c74 <_sbrk_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	2300      	movs	r3, #0
 8005c78:	4d05      	ldr	r5, [pc, #20]	; (8005c90 <_sbrk_r+0x1c>)
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fb fb96 	bl	80013b0 <_sbrk>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_sbrk_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_sbrk_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200002c0 	.word	0x200002c0

08005c94 <__sread>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f906 	bl	8005eac <_read_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	bfab      	itete	ge
 8005ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ca8:	181b      	addge	r3, r3, r0
 8005caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cae:	bfac      	ite	ge
 8005cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cb2:	81a3      	strhlt	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__swrite>:
 8005cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cba:	461f      	mov	r7, r3
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	05db      	lsls	r3, r3, #23
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	d505      	bpl.n	8005cd4 <__swrite+0x1e>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	f000 f868 	bl	8005da4 <_lseek_r>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	4628      	mov	r0, r5
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	f000 b817 	b.w	8005d1c <_write_r>

08005cee <__sseek>:
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 f855 	bl	8005da4 <_lseek_r>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	bf15      	itete	ne
 8005d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d0a:	81a3      	strheq	r3, [r4, #12]
 8005d0c:	bf18      	it	ne
 8005d0e:	81a3      	strhne	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__sclose>:
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f000 b813 	b.w	8005d40 <_close_r>
	...

08005d1c <_write_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	2200      	movs	r2, #0
 8005d26:	4d05      	ldr	r5, [pc, #20]	; (8005d3c <_write_r+0x20>)
 8005d28:	602a      	str	r2, [r5, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fb f9d4 	bl	80010d8 <_write>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_write_r+0x1e>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_write_r+0x1e>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	200002c0 	.word	0x200002c0

08005d40 <_close_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_close_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb faff 	bl	800134e <_close>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_close_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_close_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	200002c0 	.word	0x200002c0

08005d60 <_fstat_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	2300      	movs	r3, #0
 8005d64:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_fstat_r+0x20>)
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f7fb faf9 	bl	8001364 <_fstat>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d102      	bne.n	8005d7c <_fstat_r+0x1c>
 8005d76:	682b      	ldr	r3, [r5, #0]
 8005d78:	b103      	cbz	r3, 8005d7c <_fstat_r+0x1c>
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	bd38      	pop	{r3, r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	200002c0 	.word	0x200002c0

08005d84 <_isatty_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	2300      	movs	r3, #0
 8005d88:	4d05      	ldr	r5, [pc, #20]	; (8005da0 <_isatty_r+0x1c>)
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fb faf7 	bl	8001382 <_isatty>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_isatty_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_isatty_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	200002c0 	.word	0x200002c0

08005da4 <_lseek_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	2200      	movs	r2, #0
 8005dae:	4d05      	ldr	r5, [pc, #20]	; (8005dc4 <_lseek_r+0x20>)
 8005db0:	602a      	str	r2, [r5, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f7fb faef 	bl	8001396 <_lseek>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_lseek_r+0x1e>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_lseek_r+0x1e>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	200002c0 	.word	0x200002c0

08005dc8 <memchr>:
 8005dc8:	4603      	mov	r3, r0
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	b2c9      	uxtb	r1, r1
 8005dce:	4402      	add	r2, r0
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	d101      	bne.n	8005dda <memchr+0x12>
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e003      	b.n	8005de2 <memchr+0x1a>
 8005dda:	7804      	ldrb	r4, [r0, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	428c      	cmp	r4, r1
 8005de0:	d1f6      	bne.n	8005dd0 <memchr+0x8>
 8005de2:	bd10      	pop	{r4, pc}

08005de4 <memcpy>:
 8005de4:	440a      	add	r2, r1
 8005de6:	4291      	cmp	r1, r2
 8005de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dec:	d100      	bne.n	8005df0 <memcpy+0xc>
 8005dee:	4770      	bx	lr
 8005df0:	b510      	push	{r4, lr}
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfc:	d1f9      	bne.n	8005df2 <memcpy+0xe>
 8005dfe:	bd10      	pop	{r4, pc}

08005e00 <memmove>:
 8005e00:	4288      	cmp	r0, r1
 8005e02:	b510      	push	{r4, lr}
 8005e04:	eb01 0402 	add.w	r4, r1, r2
 8005e08:	d902      	bls.n	8005e10 <memmove+0x10>
 8005e0a:	4284      	cmp	r4, r0
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	d807      	bhi.n	8005e20 <memmove+0x20>
 8005e10:	1e43      	subs	r3, r0, #1
 8005e12:	42a1      	cmp	r1, r4
 8005e14:	d008      	beq.n	8005e28 <memmove+0x28>
 8005e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1e:	e7f8      	b.n	8005e12 <memmove+0x12>
 8005e20:	4601      	mov	r1, r0
 8005e22:	4402      	add	r2, r0
 8005e24:	428a      	cmp	r2, r1
 8005e26:	d100      	bne.n	8005e2a <memmove+0x2a>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e32:	e7f7      	b.n	8005e24 <memmove+0x24>

08005e34 <__malloc_lock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_lock+0x8>)
 8005e36:	f7ff b98f 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	200002b4 	.word	0x200002b4

08005e40 <__malloc_unlock>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__malloc_unlock+0x8>)
 8005e42:	f7ff b98a 	b.w	800515a <__retarget_lock_release_recursive>
 8005e46:	bf00      	nop
 8005e48:	200002b4 	.word	0x200002b4

08005e4c <_realloc_r>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	4680      	mov	r8, r0
 8005e52:	4614      	mov	r4, r2
 8005e54:	460e      	mov	r6, r1
 8005e56:	b921      	cbnz	r1, 8005e62 <_realloc_r+0x16>
 8005e58:	4611      	mov	r1, r2
 8005e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5e:	f7ff ba4b 	b.w	80052f8 <_malloc_r>
 8005e62:	b92a      	cbnz	r2, 8005e70 <_realloc_r+0x24>
 8005e64:	f7ff f9e0 	bl	8005228 <_free_r>
 8005e68:	4625      	mov	r5, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e70:	f000 f82e 	bl	8005ed0 <_malloc_usable_size_r>
 8005e74:	4284      	cmp	r4, r0
 8005e76:	4607      	mov	r7, r0
 8005e78:	d802      	bhi.n	8005e80 <_realloc_r+0x34>
 8005e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e7e:	d812      	bhi.n	8005ea6 <_realloc_r+0x5a>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7ff fa38 	bl	80052f8 <_malloc_r>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d0ed      	beq.n	8005e6a <_realloc_r+0x1e>
 8005e8e:	42bc      	cmp	r4, r7
 8005e90:	4622      	mov	r2, r4
 8005e92:	4631      	mov	r1, r6
 8005e94:	bf28      	it	cs
 8005e96:	463a      	movcs	r2, r7
 8005e98:	f7ff ffa4 	bl	8005de4 <memcpy>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff f9c2 	bl	8005228 <_free_r>
 8005ea4:	e7e1      	b.n	8005e6a <_realloc_r+0x1e>
 8005ea6:	4635      	mov	r5, r6
 8005ea8:	e7df      	b.n	8005e6a <_realloc_r+0x1e>
	...

08005eac <_read_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4d05      	ldr	r5, [pc, #20]	; (8005ecc <_read_r+0x20>)
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fb fa2a 	bl	8001314 <_read>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_read_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_read_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200002c0 	.word	0x200002c0

08005ed0 <_malloc_usable_size_r>:
 8005ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed4:	1f18      	subs	r0, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bfbc      	itt	lt
 8005eda:	580b      	ldrlt	r3, [r1, r0]
 8005edc:	18c0      	addlt	r0, r0, r3
 8005ede:	4770      	bx	lr

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
